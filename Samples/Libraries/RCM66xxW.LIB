/*
   Copyright (c) 2015, Digi International Inc.

   Permission to use, copy, modify, and/or distribute this software for any
   purpose with or without fee is hereby granted, provided that the above
   copyright notice and this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
/*** BeginHeader */
#ifndef __RCM66XXW_LIB
#define __RCM66XXW_LIB

#if !RCM6600W_SERIES
   #fatal "RCM66XXW.LIB only supports RCM66XXW series boards."
#endif

/*** EndHeader */

/* START LIBRARY DESCRIPTION *********************************************
RCM66XXW.LIB

DESCRIPTION:   This is a sample library only.

               Use with RCM66XXW series controllers and interface boards.
               Add or modify functions to suit your applications.

               RCM6600W Standard Setup:
               162.5MHz R6000, 1M internal SRAM, 802.11b/g wireless,
               10/100 Ethernet, 1MByte program serial flash

               RCM6650W Standard Setup:
               162.5MHz R6000, 1M SRAM, 1M internal SRAM,
               802.11b/g wireless, 10/100 Ethernet,
               4MByte program serial flash


END DESCRIPTION **********************************************************/


/*** BeginHeader */
#define DEVELOPMENT_BOARD  // Indicate development board LIB being used
///////
// The following macros are used with LCD/Keypad Modules and values
// default here according to the prototyping board. They must be defined
// before using graphic libraries.
// Make modifications as necessary to match your application.
///////

///////
// change strobe register here to match your application
// LCD wait state calculation:
// #ws = tcyc/tclk - 0.5 =
//     = (160nsec)/(1/44.23684Mhz) - .5 = 6.5779, therefore 7 wait states
///////
#define LCDCSREGISTER	IB6CR				// Use Port E bit 6 for LCD strobe
#define LCDCSSHADOW		IB6CRShadow		// define shadow register
#define LCDCSCONFIG		0x38				// set for 15 waits, I/O (rd and wr) data strobe, allow writes
#define LCDSTROBE			0x40				// bit 6 mask

#define KEYCSREGISTER	IB6CR				// Use Port E bit 6 for keypad strobe
#define KEYCSSHADOW		IB6CRShadow		// define shadow register
#define KEYCSCONFIG		0x38				// set for 15 waits, I/O (rd and wr) data strobe, allow writes
#define KEYSTROBE			0x40				// bit 6 mask

///////
// change base address here to match above strobe address
///////
#define LCDBASEADDR		0xC000			// A15, A14, A13 = 6 for IB6CR I/O address
#define KEYBASEADDR		0xC000			// A15, A14, A13 = 6 for IB6CR I/O address

#ifdef USE_DISPLAY_KEYPAD
#use "lcd122key7.lib"      // LCD/Keypad
#endif
/*** EndHeader */

/*** BeginHeader __brdinitflag */
extern int __brdinitflag;
/*** EndHeader */
int __brdinitflag;            //Board init function flag

/*** BeginHeader brdInit */
void brdInit(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
brdInit                       <RCM66XXW.LIB>

SYNTAX:        void brdInit (void);

DESCRIPTION:   This function initializes parallel ports A through E for
               RCM66XXW series core modules running on an RCM66XXW series
               interface board.

               Default I/O port configuration:
               -------------------------------
               The brdInit function is setup to a default I/O configuration
               for the RCM66XXW and the standard interface board.

               Note:
               -----
               This function is intended for demonstration purposes only
               and can be modified for your applications.

PARAMETER:     None

RETURN VALUE:  None

-------------------------------------------------------------------------------
   General information and I/O initialization when using an RCM66XXW series
   core module on an RCM66XXW interface board.
-------------------------------------------------------------------------------

   Summary of initialization
   -------------------------
   1. I/O port pins are configured for interface board operation.
   2. Unused configurable I/O are set as outputs.
   3. LEDs are off.
   4. Slave port disabled.

   Pins B0-B1, C6-C7, D4-D7 and E4 are separately configured by the BIOS
   and associated libraries.

   Ports F, G and H are not available on the edge connector and are
   used internally.

   PE0-3 are usable as either digital I/Os or analog inputs.  The default
   is to set these to digital outputs.  See samples/rcm6600w/adc for
   example of using analog inputs.

Pin   Port  Function                      I/O      I/O State
====  ====  ===========================   ======   =======================
35    PA0   Not used                      Output   High
36    PA1   Not used                      Output   High
37    PA2   Not used                      Output   High
38    PA3   Not used                      Output   High
39    PA4   Not used                      Output   High
40    PA5   Not used                      Output   High
41    PA6   Not used                      Output   High
42    PA7   Not used                      Output   High

27    PB0   Serial flash SCLK             Output   Driven
46    PB1   CLKA - Programming port       Output   High when not driven
29    PB2   Not used                      Output   High
30    PB3   Not used                      Output   High
31    PB4   Not used                      Output   High
32    PB5   Not used                      Output   High
33    PB6   Not used                      Output   High
34    PB7   Not used                      Output   High

21    PC0   Not used                      Output   High
22    PC1   Not used                      Output   High
23    PC2   Not used                      Output   High
24    PC3   Not used                      Output   High
25    PC4   Not used                      Output   High
26    PC5   Not used                      Output   High
48    PC6   TXA - Programming port        Output   Driven
50    PC7   RXA - Programming port        Input    Pulled-up on core

17    PD0   LED DS1                       Output   High (off)
18    PD1   Switch S1                     Input    Pulled-up i'face board
19    PD2   Not used                      Output   High
20    PD3   Not used                      Output   High
NC    PD4   Serial flash SDO              Output   Driven
NC    PD5   Serial flash SDI              Input    Pulled-up on core
NC    PD6   Serial flash CS               Output   High when not driven
NC    PD7   WiFi ADC CS                   Output   High when not driven

09    PE0   Not used                      Output   High
10    PE1   Not used                      Output   High
11    PE2   Not used                      Output   High
12    PE3   Not used                      Output   High
NC    PE4   /A0                           Output   Driven
13    PE5   Not used                      Output   High
14    PE6   Not used                      Output   High
15    PE7   Not used                      Output   High

END DESCRIPTION **********************************************************/

__nodebug
void brdInit(void)
{
   #GLOBAL_INIT {__brdinitflag  = FALSE;}

   /////////////////////////////////////////////////////////////////////////
   // Configure Port A
   /////////////////////////////////////////////////////////////////////////
#ifdef USE_DISPLAY_KEYPAD
   WrPortI(SPCR, &SPCRShadow, 0x8C);                     // Enable Aux I/O bus
#else
	WrPortI(PADR, &PADRShadow, 0xFF);                     // set outputs high
	WrPortI(SPCR, &SPCRShadow, 0x84);                     // set all to outputs
#endif

   /////////////////////////////////////////////////////////////////////////
   // Configure Port B -- Leave PB0 and PB1 untouched (used for other purposes)
   /////////////////////////////////////////////////////////////////////////
   WrPortI(PBDR,  &PBDRShadow,  RdPortI(PBDR)  | 0xFC); // set outputs to high
   WrPortI(PBDDR, &PBDDRShadow, RdPortI(PBDDR) | 0xFC); // set pins to output

   /////////////////////////////////////////////////////////////////////////
   // Configure Port C -- Leave PC6 and PC7 untouched (used for other purposes)
   /////////////////////////////////////////////////////////////////////////
   WrPortI(PCFR,  &PCFRShadow,  RdPortI(PCFR)  & 0xC0); // no special functions
                                                        //  except PC6 and PC7
   WrPortI(PCDCR, &PCDCRShadow, RdPortI(PCDCR) & 0xC0); // clear bits to drive
                                                        //  high and low
   WrPortI(PCDR,  &PCDRShadow,  RdPortI(PCDR)  | 0x3F); // set outputs high
   WrPortI(PCDDR, &PCDDRShadow, RdPortI(PCDDR) | 0x3F); // set inputs and
                                                        //  outputs

   /////////////////////////////////////////////////////////////////////////
   // Configure Port D -- Leave PD4-PD7 untouched (used for other purposes)
   /////////////////////////////////////////////////////////////////////////
   WrPortI(PDCR,  &PDCRShadow,  RdPortI(PDCR)  & 0xF0);  // clear bits to pclk/2
   WrPortI(PDFR,  &PDFRShadow,  RdPortI(PDFR)  & 0xF0);  // no special functions
   WrPortI(PDDCR, &PDDCRShadow, RdPortI(PDDCR) & 0xF0);  // clear bits to drive
                                                         //  high and low
   WrPortI(PDDR,  &PDDRShadow,  RdPortI(PDDR)  | 0x0D);  // set outputs high
   WrPortI(PDDDR, &PDDDRShadow, RdPortI(PDDDR) | 0x0D);  // set inputs and
                                                         //  outputs

   /////////////////////////////////////////////////////////////////////////
   // Configure Port E -- Leave PE4 untouched (used for other purposes)
   /////////////////////////////////////////////////////////////////////////
   WrPortI(PECR,  &PECRShadow,  RdPortI(PECR)  & 0x10);  // clear bits to pclk/2
   WrPortI(PEFR,  &PEFRShadow,  RdPortI(PEFR)  & 0x10);  // no special functions
   WrPortI(PEDCR, &PEDCRShadow, RdPortI(PEDCR) & 0x10);  // clear bits to drive
                                                         //  high and low
   WrPortI(PEDR,  &PEDRShadow,  RdPortI(PEDR)  | 0xEF);  // set outputs high
#ifdef USE_DISPLAY_KEYPAD
	BitWrPortI(PEDR, &PEDRShadow, 0, 3);                  // PE3 low for LCD
#endif
   WrPortI(PEDDR, &PEDDRShadow, RdPortI(PEDDR) | 0xEF);  // set bits to output

   __brdinitflag = TRUE;
}

/*** BeginHeader */
#endif
/*** EndHeader */