/*
   Copyright (c) 2015, Digi International Inc.

   Permission to use, copy, modify, and/or distribute this software for any
   purpose with or without fee is hereby granted, provided that the above
   copyright notice and this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
/*** BeginHeader */
#ifndef __RCM67XX_LIB
#define __RCM67XX_LIB

#if !RCM6700_SERIES
   #fatal "RCM67XX.LIB only supports RCM67XX series boards."
#endif
/*** EndHeader */

/* START LIBRARY DESCRIPTION ***************************************************
RCM67XX.LIB

DESCRIPTION:
   This is a sample library only.

   Use with RCM67XX series controllers and interface boards.
   Add or modify functions to suit your applications.
END DESCRIPTION ***************************************************************/

/*** BeginHeader */
#define DEVELOPMENT_BOARD	// Indicate development board LIB being used
///////
// The following macros are used with LCD/Keypad Modules and values
// default here according to the prototyping board. They must be defined
// before using graphic libraries.
// Make modifications as necessary to match your application.
///////

///////
// change strobe register here to match your application
// LCD wait state calculation:
// #ws = tcyc/tclk - 0.5 =
//     = (160nsec)/(1/44.23684Mhz) - .5 = 6.5779, therefore 7 wait states
///////
#define LCDCSREGISTER	IB6CR				// Use Port E bit 6 for LCD strobe
#define LCDCSSHADOW		IB6CRShadow		// define shadow register
#define LCDCSCONFIG		0x38				// set for 15 waits, I/O (rd and wr) data strobe, allow writes
#define LCDSTROBE			0x40				// bit 6 mask

#define KEYCSREGISTER	IB6CR				// Use Port E bit 6 for keypad strobe
#define KEYCSSHADOW		IB6CRShadow		// define shadow register
#define KEYCSCONFIG		0x38				// set for 15 waits, I/O (rd and wr) data strobe, allow writes
#define KEYSTROBE			0x40				// bit 6 mask

///////
// change base address here to match above strobe address
///////
#define LCDBASEADDR		0xC000			// A15, A14, A13 = 6 for IB6CR I/O address
#define KEYBASEADDR		0xC000			// A15, A14, A13 = 6 for IB6CR I/O address

#ifdef USE_DISPLAY_KEYPAD
#use "lcd122key7.lib"      // LCD/Keypad
#endif
/*** EndHeader */

/*** BeginHeader __brdinitflag */
extern int __brdinitflag;
/*** EndHeader */

int __brdinitflag;			// Board init function called flag

/*** BeginHeader brdInit */
void brdInit(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
brdInit                       <RCM67XX.LIB>

SYNTAX:
   void brdInit(void);

DESCRIPTION:
   This function initializes parallel ports A through E and G for RCM67XX
   series core modules running on an RCM67XX series interface board.

   Default I/O port configuration:
   -------------------------------
   The brdInit function sets up a default I/O configuration for RCM67XX
   MiniCores and the standard RCM67XX series MiniCore interface board.

   Note:
   -----
   This function is intended for demonstration purposes only and should be
   modified for your applications.

PARAMETER:
   None.

RETURN VALUE:
   None.

   -----------------------------------------------------------------------
   General information and I/O initialization when using an RCM67XX series
   core module on an RCM67XX interface board.
   -----------------------------------------------------------------------

   Summary of initialization
   -------------------------
   1. I/O port pins are configured for interface board operation.
   2. Unused configurable I/O are set as outputs.
   3. LEDs are off.
   4. Slave port disabled.

   Pins B1, C6-C7, D7 and E4 are separately configured by the BIOS and
   associated libraries.

   Note that parallel port H is not connected to the I/O edge connector,
   so is not available for use as a general purpose I/O port.

Pin  Port  Function                         I/O     I/O State
===  ====  ===============================  ======  ======================
35   PA0   Not used                         Output  High
36   PA1   Not used                         Output  High
37   PA2   Not used                         Output  High
38   PA3   Not used                         Output  High
39   PA4   Not used                         Output  High
40   PA5   Not used                         Output  High
41   PA6   Not used                         Output  High
42   PA7   Not used                         Output  High

27   PB0   CLKB - Serial boot flash         Output  Setup by sflash driver
46   PB1   CLKA - Programming port          Output  High when not driven
29   PB2   Not used                         Output  High
30   PB3   Not used                         Output  High
31   PB4   Not used                         Output  High
32   PB5   Not used                         Output  High
33   PB6   Not used                         Output  High
34   PB7   Not used                         Output  High

21   PC0   Not used                         Output  High
22   PC1   Not used                         Output  High
23   PC2   Not used                         Output  High
24   PC3   Not used                         Output  High
25   PC4   Not used                         Output  High
26   PC5   Not used                         Output  High
48   PC6   TXA - Programming port           Output  Driven
50   PC7   RXA - Programming port           Input   Pulled-up on core

17   PD0   LED DS1                          Output  High (off)
18   PD1   Switch S1                        Input   Pulled-up on iface brd
19   PD2   Not used                         Output  High
20   PD3   Not used                         Output  High
NC   PD4   TXB - Serial boot flash          Output  Setup by sflash driver
NC   PD5   RXB - Serial boot flash          Input   Setup by sflash driver
NC   PD6   /CS - Serial boot flash          Output  Setup by sflash driver
NC   PD7   Not available                    Output  High

09   PE0   Not used                         Output  High
10   PE1   Not used                         Output  High
11   PE2   Not used                         Output  High
12   PE3   Not used                         Output  High
NC   PE4   Not available                    Output  High
13   PE5   Not used                         Output  High
14   PE6   Not used                         Output  High
15   PE7   Not used                         Output  High

07   PG0   RCM6700/20/50: ETH_LN_AC         Output  High when no link+activity
           RCM6710/30/60: Not used          Output  High
NC   PG1   RCM6700/20/50: Not available     Output  High
           RCM6710/30/60: ETH_LNK           Output  High when no link
NC   PG2   RCM6700/20/50: Not available     Output  High
           RCM6710/30/60: ETH_ACT           Output  High when no activity
NC   PG3   Not available                    Output  High
NC   PG4   Not available                    Output  High
NC   PG5   Not available                    Output  High
NC   PG6   Not available                    Output  High
NC   PG7   Not available                    Output  High

NC   PH0   Not available                    Output  High
NC   PH1   Not available                    Output  High
NC   PH2   Not available                    Output  High
NC   PH3   Not available                    Output  High
NC   PH4   Not available                    Output  High
NC   PH5   Not available                    Output  High
NC   PH6   Not available                    Output  High
NC   PH7   Not available                    Output  High
END DESCRIPTION *********************************************************/

__nodebug
void brdInit(void)
{
#GLOBAL_INIT { __brdinitflag  = FALSE; }

	/////////////////////////////////////////////////////////////////////////
	// Configure Port A
	/////////////////////////////////////////////////////////////////////////
#ifdef USE_DISPLAY_KEYPAD
   WrPortI(SPCR, &SPCRShadow, 0x8C);                     // Enable Aux I/O bus
#else
	WrPortI(PADR, &PADRShadow, 0xFF);                     // set outputs high
	WrPortI(SPCR, &SPCRShadow, 0x84);                     // set all to outputs
#endif

	/////////////////////////////////////////////////////////////////////////
	// Configure Port B -- Leave PB0 and PB1 untouched (set up by serial flash
	//                     driver and used for other purposes, respectively)
	/////////////////////////////////////////////////////////////////////////
	WrPortI(PBDR,  &PBDRShadow,  RdPortI(PBDR)  | 0xFC);  // set outputs to high
	WrPortI(PBDDR, &PBDDRShadow, RdPortI(PBDDR) | 0xFC);  // set up I/Os

	/////////////////////////////////////////////////////////////////////////
	// Configure Port C -- Leave PC6 and PC7 untouched (used for other purposes)
	/////////////////////////////////////////////////////////////////////////
	WrPortI(PCFR,  &PCFRShadow,  RdPortI(PCFR)  & 0xC0);  // no special functions
	                                                      //  except PC6 and PC7
	WrPortI(PCDCR, &PCDCRShadow, RdPortI(PCDCR) & 0xC0);  // clear bits to drive
	                                                      //  high and low
	WrPortI(PCDR,  &PCDRShadow,  RdPortI(PCDR)  | 0x3F);  // set outputs high
	WrPortI(PCDDR, &PCDDRShadow, RdPortI(PCDDR) | 0x3F);  // set up I/Os

	/////////////////////////////////////////////////////////////////////////
	// Configure Port D -- PD4, PD5 and PD6 set up by serial flash driver
	/////////////////////////////////////////////////////////////////////////
	WrPortI(PDCR,  &PDCRShadow,  0x00);                   // clear bits to pclk/2
	WrPortI(PDDCR, &PDDCRShadow, 0x00);                   // clear bits to drive
	                                                      //  high and low
	WrPortI(PDDR,  &PDDRShadow,  RdPortI(PDDR)  | 0xFD);  // set outputs high
	WrPortI(PDFR,  &PDFRShadow,  RdPortI(PDFR)  & 0x70);  // sflash on PD4,5,6
	WrPortI(PDDDR, &PDDDRShadow, RdPortI(PDDDR) | 0x8D);  // set up I/Os

	/////////////////////////////////////////////////////////////////////////
	// Configure Port E
	/////////////////////////////////////////////////////////////////////////
	WrPortI(PECR,  &PECRShadow,  0x00);                   // clear bits to pclk/2
	WrPortI(PEFR,  &PEFRShadow,  0x00);                   // no special functions
	WrPortI(PEDCR, &PEDCRShadow, 0x00);                   // clear bits to drive
	                                                      //  high and low
#ifdef USE_DISPLAY_KEYPAD
	WrPortI(PEDR,  &PEDRShadow,  0xF7);                   // PE3 low for LCD, others high
#else
	WrPortI(PEDR,  &PEDRShadow,  0xFF);                   // set outputs high
#endif
	WrPortI(PEDDR, &PEDDRShadow, 0xFF);                   // set all to outputs

	/////////////////////////////////////////////////////////////////////////
	// Configure Port G
	/////////////////////////////////////////////////////////////////////////
	WrPortI(PGFR,  &PGFRShadow,  0x00);                   // no special functions
	WrPortI(PGDCR, &PGDCRShadow, 0x00);                   // clear bits to drive
	                                                      //  high and low
	WrPortI(PGDR,  &PGDRShadow,  0xFF);                   // set outputs high
	WrPortI(PGDDR, &PGDDRShadow, 0xFF);                   // set all to outputs

	/////////////////////////////////////////////////////////////////////////
	// Configure Port H
	/////////////////////////////////////////////////////////////////////////
	WrPortI(PHFR,  &PHFRShadow,  0x00);                   // no special functions
	WrPortI(PHDCR, &PHDCRShadow, 0x00);                   // clear bits to drive
	                                                      //  high and low
	WrPortI(PHDR,  &PHDRShadow,  0xFF);                   // set outputs high
	WrPortI(PHDDR, &PHDDRShadow, 0xFF);                   // set all to outputs

	/////////////////////////////////////////////////////////////////////////
	// The following (optional) Ethernet link / activity outputs set up
	// essentially duplicates DMAETH100.LIB's _dmaeth100_init_enet_status()
	// functionality, but this duplication can't be helped because in this
	// sample board-specific library we can't be sure that Ethernet is used, or
	// if Ethernet is used, whether this brdInit() function is called before or
	// after Ethernet is initialized.
	/////////////////////////////////////////////////////////////////////////
#if defined _ENABLED_ENET_STATUS
	// first, set the Ethernet activity status output to its disabled state
 #if defined ENET_ACTIVITY_ACTIVEHIGH
	WrPortI(_ENET_ACT_D, &_ENET_ACT_DSHADOW,
	        ~ENET_ACTIVITY_MASK & RdPortI(_ENET_ACT_D));
 #else
	WrPortI(_ENET_ACT_D, &_ENET_ACT_DSHADOW,
	        ENET_ACTIVITY_MASK | RdPortI(_ENET_ACT_D));
 #endif
 #if PADR == _ENET_ACT_D
	// last, no choice but to set the entire parallel port as outputs
	WrPortI(SPCR,  &SPCRShadow,  0x84);
 #elif PBDR == _ENET_ACT_D
	// last, set Ethernet activity status direction to output
	WrPortI(PBDDR, &PBDDRShadow, ENET_ACTIVITY_MASK | RdPortI(PBDDR));
 #elif PCDR == _ENET_ACT_D
	// set Ethernet activity status to normal function
	WrPortI(PCFR,  &PCFRShadow,  ~ENET_ACTIVITY_MASK & RdPortI(PCFR));
	// set Ethernet activity status to push+pull driven
	WrPortI(PCDCR, &PCDCRShadow, ~ENET_ACTIVITY_MASK & RdPortI(PCDCR));
	// last, set Ethernet activity status direction to output
	WrPortI(PCDDR, &PCDDRShadow, ENET_ACTIVITY_MASK | RdPortI(PCDDR));
 #elif PDDR == _ENET_ACT_D
	// set Ethernet activity status to normal function
	WrPortI(PDFR,  &PDFRShadow,  ~ENET_ACTIVITY_MASK & RdPortI(PDFR));
	// set Ethernet activity status to push+pull driven
	WrPortI(PDDCR, &PDDCRShadow, ~ENET_ACTIVITY_MASK & RdPortI(PDDCR));
	// last, set Ethernet activity status direction to output
	WrPortI(PDDDR, &PDDDRShadow, ENET_ACTIVITY_MASK | RdPortI(PDDDR));
 #elif PEDR == _ENET_ACT_D
	// set Ethernet activity status to normal function
	WrPortI(PEFR,  &PEFRShadow,  ~ENET_ACTIVITY_MASK & RdPortI(PEFR));
	// set Ethernet activity status to push+pull driven
	WrPortI(PEDCR, &PEDCRShadow, ~ENET_ACTIVITY_MASK & RdPortI(PEDCR));
	// last, set Ethernet activity status direction to output
	WrPortI(PEDDR, &PEDDRShadow, ENET_ACTIVITY_MASK | RdPortI(PEDDR));
 #elif PGDR == _ENET_ACT_D
	// set Ethernet activity status to normal function
	WrPortI(PGFR,  &PGFRShadow,  ~ENET_ACTIVITY_MASK & RdPortI(PGFR));
	// set Ethernet activity status to push+pull driven
	WrPortI(PGDCR, &PGDCRShadow, ~ENET_ACTIVITY_MASK & RdPortI(PGDCR));
	// last, set Ethernet activity status direction to output
	WrPortI(PGDDR, &PGDDRShadow, ENET_ACTIVITY_MASK | RdPortI(PGDDR));
 #else
	#fatal "Unsupported PxDR I/O address, can't init Ethernet activity output!"
 #endif
	// first, set the Ethernet link status output to its disabled state
 #if defined ENET_LINK_ACTIVEHIGH
	WrPortI(_ENET_LINK_D, &_ENET_LINK_DSHADOW,
	        ~ENET_LINK_MASK & RdPortI(_ENET_LINK_D));
 #else
	WrPortI(_ENET_LINK_D, &_ENET_LINK_DSHADOW,
	        ENET_LINK_MASK | RdPortI(_ENET_LINK_D));
 #endif
 #if PADR == _ENET_LINK_D
	// last, no choice but to set the entire parallel port as outputs
	WrPortI(SPCR,  &SPCRShadow,  0x84);
 #elif PBDR == _ENET_LINK_D
	// last, set Ethernet activity status direction to output
	WrPortI(PBDDR, &PBDDRShadow, ENET_LINK_MASK | RdPortI(PBDDR));
 #elif PCDR == _ENET_LINK_D
	// set Ethernet activity status to normal function
	WrPortI(PCFR,  &PCFRShadow,  ~ENET_LINK_MASK & RdPortI(PCFR));
	// set Ethernet activity status to push+pull driven
	WrPortI(PCDCR, &PCDCRShadow, ~ENET_LINK_MASK & RdPortI(PCDCR));
	// last, set Ethernet activity status direction to output
	WrPortI(PCDDR, &PCDDRShadow, ENET_LINK_MASK | RdPortI(PCDDR));
 #elif PDDR == _ENET_LINK_D
	// set Ethernet activity status to normal function
	WrPortI(PDFR,  &PDFRShadow,  ~ENET_LINK_MASK & RdPortI(PDFR));
	// set Ethernet activity status to push+pull driven
	WrPortI(PDDCR, &PDDCRShadow, ~ENET_LINK_MASK & RdPortI(PDDCR));
	// last, set Ethernet activity status direction to output
	WrPortI(PDDDR, &PDDDRShadow, ENET_LINK_MASK | RdPortI(PDDDR));
 #elif PEDR == _ENET_LINK_D
	// set Ethernet activity status to normal function
	WrPortI(PEFR,  &PEFRShadow,  ~ENET_LINK_MASK & RdPortI(PEFR));
	// set Ethernet activity status to push+pull driven
	WrPortI(PEDCR, &PEDCRShadow, ~ENET_LINK_MASK & RdPortI(PEDCR));
	// last, set Ethernet activity status direction to output
	WrPortI(PEDDR, &PEDDRShadow, ENET_LINK_MASK | RdPortI(PEDDR));
 #elif PGDR == _ENET_LINK_D
	// set Ethernet activity status to normal function
	WrPortI(PGFR,  &PGFRShadow,  ~ENET_LINK_MASK & RdPortI(PGFR));
	// set Ethernet activity status to push+pull driven
	WrPortI(PGDCR, &PGDCRShadow, ~ENET_LINK_MASK & RdPortI(PGDCR));
	// last, set Ethernet activity status direction to output
	WrPortI(PGDDR, &PGDDRShadow, ENET_LINK_MASK | RdPortI(PGDDR));
 #else
	#fatal "Unsupported PxDR I/O address, can't init Ethernet link output!"
 #endif
#endif

   __brdinitflag = TRUE;
}

/*** BeginHeader */
#endif	// __RCM67XX_LIB
/*** EndHeader */