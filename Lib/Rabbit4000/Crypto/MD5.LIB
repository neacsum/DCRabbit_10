/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*
  ==== Recoding of MD5 algorithm in Rabbit assembler code. ====
  --> Modification of original source.  Core routine optimized
  --> to run about 6.5 times faster than original.  Also correctly
  --> handle append segments of 8k or greater.
  --> The code is also 10k smaller than original C implementation,
  --> now under 2.9kB.
  --> Benchmark speed for 8kB block is about 55kB/sec on 22MHz Rabbit.
  ==== More recoding of MD5 algorithm for Rabbit 4000. ====
  --> Much speedup by use of 32-bit operations, and reduction of memory
      access because work values stored in pw,x,y,z.
  ==== More recoding of MD5 algorithm for Rabbit 6000. ====
  --> Change to explicit cycling of ps regs, and take advantage of
      special insns.

  This code implements the MD5 Algorithm defined in RFC 1321.
  It is derived directly from the text of the RFC and not from the
  reference implementation.

	The following software is derived from software originally written
	by Aladdin Enterprises. The copyright notice for the original code is
	below:

  Copyright (C) 2006 Aladdin Enterprises.  All rights reserved.

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  L. Peter Deutsch
  ghost@aladdin.com

*/
/*** BeginHeader */
#ifndef __MD5_LIB
#define __MD5_LIB

#ifndef _RAB6K
	#define _RAB6K 0
#endif

#ifndef __md5def
   #define __md5def
#endif


typedef unsigned long md5_long; /* 32-bit word */
typedef char md5_byte_t;

/* Define the state of the MD5 Algorithm. */
typedef struct md5_state_s {
    md5_long count[2];		/* 0  message length in bits, lsw first */
    md5_long abcd[4];		/* 8  digest buffer */
    byte buf[64];				/* 40 accumulate block */
} md5_state_t;

/*** EndHeader */

/*** BeginHeader md5_round1, md5_round2, md5_round3, md5_round4 */

  // These are not C-callable functions!

  /* Each "round" function (actually, 1/4 round) does 4 operations on cyclic permutation
     of (pw, px, py, pz).  On entry, pw, px, py and pz contain 4 x 32-bit values; a,b,c,d.
     IY points to current "random" table entry.  (SP+52+5) is offset of zeroth element in
     input data.  On return, IY is incremented to next table entry.
     Other registers are used for temporary results: JKHL is current long operand (accumulator).
  */

__xmem void md5_round1(void);
__xmem void md5_round2(void);
__xmem void md5_round3(void);
__xmem void md5_round4(void);

#define MD5_S		52
#define MD5_SO	MD5_S+5

// MD5_ST: store JKHL at x
#define MD5_ST(x)  ld		x,jkhl

// MD5_ADD: add (reg+x) to JKHL.  reg is IX, IY or SP.
#if _RAB6K
	#define MD5_ADD(reg, x) add   jkhl,(reg+x)
	//#define MD5_ADD(reg, x) nop $ nop $ nop $ nop $ nop $ nop $ nop $ nop
	//#define MD5_ADD(reg, x) \
	//   ld    bcde,(reg+x) $ \
	//   add   jkhl,bcde
#else
	#define MD5_ADD(reg, x) \
	   ld    bcde,(reg+x) $ \
	   add   jkhl,bcde
#endif

// MD5_ADDP: add p[w,x,y,z] to JKHL.
#if _RAB6K
	#define MD5_ADDP(reg) add   jkhl,reg
	//#define MD5_ADDP(reg) nop $ nop
	//#define MD5_ADDP(reg) \
	//   ld    bcde,reg $ \
	//   add   jkhl,bcde
#else
	#define MD5_ADDP(reg) \
	   ld    bcde,reg $ \
	   add   jkhl,bcde
#endif

// MD5_ROL*: rotate JKHL left by 1,-1,2,-2, 4, -4, 8,16,24
#define MD5_ROL \
	rlc	1,jkhl

#define MD5_ROR \
	rrc	1,jkhl

#define MD5_ROL2 \
	rlc	2,jkhl

#define MD5_ROR2 \
	rrc	2,jkhl

#define MD5_ROL4 \
	rlc	4,jkhl

#define MD5_ROR4 \
	rrc	4,jkhl

#define MD5_ROL8 \
	rlc	8,jkhl

#define MD5_ROL16 \
	rlc	8,jkhl $ rlc	8,jkhl

#define MD5_ROL24 \
	rrc	8,jkhl

// MD5_*: x, y, z parameters are p[w,x,y,z] registers, containing longword work values.
// Result returned in JKHL.

#if _RAB6K
	#define MD5_F \
		db	0X49, 0XC3		// use md5_f1
	#define MD5_G \
		db	0X49, 0XD3		// use md5_f2
	#define MD5_H \
		db	0X49, 0XE2		// use sha_f3 (xors)
	#define MD5_I \
		db	0X49, 0XE3		// use md5_f3
	// Cycle ps regs as w->x->y->z->w.  Unfortunately, this is a bit more complex
	// than would like, and we have to trash jkhl.  To avoid the exp, need to
	// change the ordering of regs in the algorithm.  Big work for small gain.
	// Uses SR4REG instruction.
	#define MD5_CYC \
		db	0X49, 0XBE $ \
		ld pw,jkhl

	//#define MD5_CYC ld jkhl,pw $ ld pw,pz $ ld pz,py $ ld py,px $ ld px,jkhl

#else
	// F(x, y, z) = x & y | ~x & z
	#define MD5_F(x,y,z) \
	   ld    jkhl,-1 $ \
	   ld    bcde,x $ \
	   xor   jkhl,bcde $ \
	   ld    bcde,z $ \
	   and   jkhl,bcde $ \
	   ld    px',jkhl $ \
	   ld    bcde,y $ \
	   ld    jkhl,x $ \
	   and   jkhl,bcde $ \
	   exp $ \
	   ld    bcde,px $ \
	   exp $ \
	   or    jkhl,bcde

	//#define MD5_G(x,y,z) MF5_F(z,x,y)
	#define MD5_G(y,z,x) \
	   ld    jkhl,-1 $ \
	   ld    bcde,x $ \
	   xor   jkhl,bcde $ \
	   ld    bcde,z $ \
	   and   jkhl,bcde $ \
	   ld    px',jkhl $ \
	   ld    bcde,y $ \
	   ld    jkhl,x $ \
	   and   jkhl,bcde $ \
	   exp $ \
	   ld    bcde,px $ \
	   exp $ \
	   or    jkhl,bcde


	//  H(x,y,z) = x ^ y ^ z
	#define MD5_H(x,y,z) \
	   ld    jkhl,x $ \
	   ld    bcde,y $ \
	   xor   jkhl,bcde $ \
	   ld    bcde,z $ \
	   xor   jkhl,bcde


	// I(x,y,z) = y ^ (x | ~z)
	#define MD5_I(x,y,z) \
	   ld    jkhl,-1 $ \
	   ld    bcde,z $ \
	   xor   jkhl,bcde $ \
	   ld    bcde,x $ \
	   or    jkhl,bcde $ \
	   ld    bcde,y $ \
	   xor   jkhl,bcde

#endif	//_RAB6K
/*** EndHeader */

	/* Round 1. */
	/* Let [abcd k s i] denote the operation
	   a = b + ((a + F(b,c,d) + X[k] + T[i]) <<< s).
      where F(x, y, z) = x & y | ~x & z
      Rotations are (left) 7, 12, 17, 22
      Indices are 0, 1, 2, 3  */

#asm __xmem
md5_round1::
#if _RAB6K
	MD5_F
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROR				; RL 7
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC

	MD5_F
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+4)
	MD5_ADD(iy, 4)
	MD5_ROL8
	MD5_ROL4				; RL 12
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC

	MD5_F
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+8)
	MD5_ADD(iy, 8)
	MD5_ROL16
	MD5_ROL				; RL 17
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC

	MD5_F
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+12)
	MD5_ADD(iy, 12)
	MD5_ROL24
	MD5_ROR2				; RL 22
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC
#else
	MD5_F(px,py,pz)
	MD5_ADDP(pw)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROR				; RL 7
	MD5_ADDP(px)
	MD5_ST(pw)

	MD5_F(pw,px,py)
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+4)
	MD5_ADD(iy, 4)
	MD5_ROL8
	MD5_ROL4				; RL 12
	MD5_ADDP(pw)
	MD5_ST(pz)

	MD5_F(pz,pw,px)
	MD5_ADDP(py)
	MD5_ADD(sp, MD5_SO+8)
	MD5_ADD(iy, 8)
	MD5_ROL16
	MD5_ROL				; RL 17
	MD5_ADDP(pz)
	MD5_ST(py)

	MD5_F(py,pz,pw)
	MD5_ADDP(px)
	MD5_ADD(sp, MD5_SO+12)
	MD5_ADD(iy, 12)
	MD5_ROL24
	MD5_ROR2				; RL 22
	MD5_ADDP(py)
	MD5_ST(px)
#endif
	ld		de,16
	add	iy,de
	lret
#endasm

	/* Round 2. */
	/* Let [abcd k s i] denote the operation
	   a = b + ((a + G(b,c,d) + X[k] + T[i]) <<< s).
	   where G(x, y, z) = x & z | y & ~z
      Rotations are (left) 5, 9, 14, 20
      Indices are 0, 5, 10, 15  */

#asm __xmem
md5_round2::
#if _RAB6K
	MD5_G
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL4
	MD5_ROL				; RL 5
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC

	MD5_G
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+20)
	MD5_ADD(iy, 4)
	MD5_ROL8
	MD5_ROL				; RL 9
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC

	MD5_G
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+40)
	MD5_ADD(iy, 8)
	MD5_ROL16
	MD5_ROR2				; RL 14
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC

	MD5_G
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+60)
	MD5_ADD(iy, 12)
	MD5_ROL24
	MD5_ROR4				; RL 20
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC
#else
	MD5_G(px,py,pz)
	MD5_ADDP(pw)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL4
	MD5_ROL				; RL 5
	MD5_ADDP(px)
	MD5_ST(pw)

	MD5_G(pw,px,py)
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+20)
	MD5_ADD(iy, 4)
	MD5_ROL8
	MD5_ROL				; RL 9
	MD5_ADDP(pw)
	MD5_ST(pz)

	MD5_G(pz,pw,px)
	MD5_ADDP(py)
	MD5_ADD(sp, MD5_SO+40)
	MD5_ADD(iy, 8)
	MD5_ROL16
	MD5_ROR2				; RL 14
	MD5_ADDP(pz)
	MD5_ST(py)

	MD5_G(py,pz,pw)
	MD5_ADDP(px)
	MD5_ADD(sp, MD5_SO+60)
	MD5_ADD(iy, 12)
	MD5_ROL24
	MD5_ROR4				; RL 20
	MD5_ADDP(py)
	MD5_ST(px)
#endif
	ld		de,16
	add	iy,de
	lret
#endasm

	/* Round 3. */
	/* Let [abcd k s t] denote the operation
	   a = b + ((a + H(b,c,d) + X[k] + T[i]) <<< s).
	   where H(x,y,z) = x ^ y ^ z
      Rotations are (left) 4, 11, 16, 23
      Indices are 0, 3, 6, 9  */

#asm __xmem
md5_round3::
#if _RAB6K
	MD5_H
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL4				; RL 4
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC

	MD5_H
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+12)
	MD5_ADD(iy, 4)
	MD5_ROL8
	MD5_ROL2
	MD5_ROL				; RL 11
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC

	MD5_H
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+24)
	MD5_ADD(iy, 8)
	MD5_ROL16			; RL 16
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC

	MD5_H
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+36)
	MD5_ADD(iy, 12)
	MD5_ROL24
	MD5_ROR				; RL 23
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC
#else
	MD5_H(px,py,pz)
	MD5_ADDP(pw)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL4				; RL 4
	MD5_ADDP(px)
	MD5_ST(pw)

	MD5_H(pw,px,py)
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+12)
	MD5_ADD(iy, 4)
	MD5_ROL8
	MD5_ROL2
	MD5_ROL				; RL 11
	MD5_ADDP(pw)
	MD5_ST(pz)

	MD5_H(pz,pw,px)
	MD5_ADDP(py)
	MD5_ADD(sp, MD5_SO+24)
	MD5_ADD(iy, 8)
	MD5_ROL16			; RL 16
	MD5_ADDP(pz)
	MD5_ST(py)

	MD5_H(py,pz,pw)
	MD5_ADDP(px)
	MD5_ADD(sp, MD5_SO+36)
	MD5_ADD(iy, 12)
	MD5_ROL24
	MD5_ROR				; RL 23
	MD5_ADDP(py)
	MD5_ST(px)
#endif
	ld		de,16
	add	iy,de
	lret
#endasm

	/* Round 4. */
	/* Let [abcd k s t] denote the operation
	   a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s).
	   where I(x,y,z) = y ^ (x | ~z)
      Rotations are (left) 6, 10, 15, 21
      Indices are 0, 7, 14, 5  */

#asm __xmem
md5_round4::
#if _RAB6K
	MD5_I
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROR2				; RL 6
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC

	MD5_I
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+28)
	MD5_ADD(iy, 4)
	MD5_ROL8
	MD5_ROL2				; RL 10
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC

	MD5_I
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+56)
	MD5_ADD(iy, 8)
	MD5_ROL16
	MD5_ROR				; RL 15
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC

	MD5_I
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+20)
	MD5_ADD(iy, 12)
	MD5_ROL24
	MD5_ROR2
	MD5_ROR				; RL 21
	MD5_ADDP(pw)
	MD5_ST(pz)
	MD5_CYC
#else
	MD5_I(px,py,pz)
	MD5_ADDP(pw)
	MD5_ADD(sp, MD5_SO+0)
	MD5_ADD(iy, 0)
	MD5_ROL8
	MD5_ROR2				; RL 6
	MD5_ADDP(px)
	MD5_ST(pw)

	MD5_I(pw,px,py)
	MD5_ADDP(pz)
	MD5_ADD(sp, MD5_SO+28)
	MD5_ADD(iy, 4)
	MD5_ROL8
	MD5_ROL2				; RL 10
	MD5_ADDP(pw)
	MD5_ST(pz)

	MD5_I(pz,pw,px)
	MD5_ADDP(py)
	MD5_ADD(sp, MD5_SO+56)
	MD5_ADD(iy, 8)
	MD5_ROL16
	MD5_ROR				; RL 15
	MD5_ADDP(pz)
	MD5_ST(py)

	MD5_I(py,pz,pw)
	MD5_ADDP(px)
	MD5_ADD(sp, MD5_SO+20)
	MD5_ADD(iy, 12)
	MD5_ROL24
	MD5_ROR2
	MD5_ROR				; RL 21
	MD5_ADDP(py)
	MD5_ST(px)
#endif
	ld		de,16
	add	iy,de
	lret
#endasm

/*** BeginHeader md5_process */

__xmem void md5_process(md5_state_t __far*pms, const byte __far *data  /* [64] */ );

/*** EndHeader */


static const md5_long md5_ttab[64] =
{ 0xd76aa478,0xe8c7b756,0x242070db,0xc1bdceee,
  0xf57c0faf,0x4787c62a,0xa8304613,0xfd469501,
  0x698098d8,0x8b44f7af,0xffff5bb1,0x895cd7be,
  0x6b901122,0xfd987193,0xa679438e,0x49b40821,
  0xf61e2562,0xc040b340,0x265e5a51,0xe9b6c7aa,
  0xd62f105d,0x02441453,0xd8a1e681,0xe7d3fbc8,
  0x21e1cde6,0xc33707d6,0xf4d50d87,0x455a14ed,
  0xa9e3e905,0xfcefa3f8,0x676f02d9,0x8d2a4c8a,
  0xfffa3942,0x8771f681,0x6d9d6122,0xfde5380c,
  0xa4beea44,0x4bdecfa9,0xf6bb4b60,0xbebfbc70,
  0x289b7ec6,0xeaa127fa,0xd4ef3085,0x04881d05,
  0xd9d4d039,0xe6db99e5,0x1fa27cf8,0xc4ac5665,
  0xf4292244,0x432aff97,0xab9423a7,0xfc93a039,
  0x655b59c3,0x8f0ccc92,0xffeff47d,0x85845dd1,
  0x6fa87e4f,0xfe2ce6e0,0xa3014314,0x4e0811a1,
  0xf7537e82,0xbd3af235,0x2ad7d2bb,0xeb86d391
};

__nodebug __xmem void md5_process(md5_state_t __far*pms, const byte __far *data)
{
	auto md5_long X[31];

	_f_memcpy(X, data, 64);
	_f_memcpy(X+16, data, 60);	// Duplicate part of input data to avoid modulo operations
	#if _RAB6K
	setEXPCanonical();
	#endif

#asm
   push	ix
   ld		pz,(sp+@sp+2+pms)
#if _RAB6K
	; Basically same code as for R4k, except use pz,pw,px,py instead of pw,px,py,pz
	; so that registers are lined up correctly for special instructions.
   ld		pw,(pz+12)			; Get b,c,d,a values
   ld		px,(pz+16)
   ld		py,(pz+20)
   ld		pz,(pz+8)
#else
   ld		pw,(pz+8)			; Get a,b,c,d values
   ld		px,(pz+12)
   ld		py,(pz+16)
   ld		pz,(pz+20)
#endif
	; Do round 1
	ld		iy,md5_ttab			; IY points to "random" coefficients (inc by 64 for each round)

	; Dirty trick: The called function accesses the values in the X array (input data) by offsetting
	; from SP.  The caller (this fn) adjusts SP so that the callee accesses the desired first element
	; of X using offset (5+52) = MD5_SO.  The 5 counts the lcall return address and pushed IX.  The 52 makes sure
	; we never have to set SP higher than it currently is, to avoid trashing X!

	add	sp,-MD5_S				; X[0]
	lcall	md5_round1
	add	sp,16						; X[4]
	lcall	md5_round1
	add	sp,16						; X[8]
	lcall	md5_round1
	add	sp,16						; X[16]
	lcall	md5_round1


	; Do round 2
	add	sp,-48+4					; X[1]
	lcall	md5_round2
	add	sp,16						; X[5]
	lcall	md5_round2
	add	sp,16						; X[9]
	lcall	md5_round2
	add	sp,16						; X[13]
	lcall	md5_round2

	add	sp,-48+16				; X[5]
	lcall	md5_round3
	add	sp,-16					; X[1]
	lcall	md5_round3
	add	sp,48						; X[13]
	lcall	md5_round3
	add	sp,-16					; X[9]
	lcall	md5_round3

	add	sp,-9*4					; X[0]
	lcall	md5_round4
	add	sp,48						; X[12]
	lcall	md5_round4
	add	sp,-16					; X[8]
	lcall	md5_round4
	add	sp,-16					; X[4]
	lcall	md5_round4

	add	sp,MD5_S-16			; Set back to normal stack frame

#if _RAB6K
   // Finally, add in current work values (pz,w,x,y) to [a,b,c,d]
   ld		bcde,pz
   ld		pz,(sp+@sp+pms+2)
   ld		jkhl,(pz+8)
   add	jkhl,bcde
   ld		(pz+8),jkhl
   ld		jkhl,(pz+12)
   ld		bcde,pw
   add	jkhl,bcde
   ld		(pz+12),jkhl
   ld		jkhl,(pz+16)
   ld		bcde,px
   add	jkhl,bcde
   ld		(pz+16),jkhl
   ld		jkhl,(pz+20)
   ld		bcde,py
   add	jkhl,bcde
   ld		(pz+20),jkhl
#else
   // Finally, add in current work values (pw,x,y,z) to [a,b,c,d]
   ld		bcde,pw
   ld		pw,(sp+@sp+pms+2)
   ld		jkhl,(pw+8)
   add	jkhl,bcde
   ld		(pw+8),jkhl
   ld		jkhl,(pw+12)
   ld		bcde,px
   add	jkhl,bcde
   ld		(pw+12),jkhl
   ld		jkhl,(pw+16)
   ld		bcde,py
   add	jkhl,bcde
   ld		(pw+16),jkhl
   ld		jkhl,(pw+20)
   ld		bcde,pz
   add	jkhl,bcde
   ld		(pw+20),jkhl
#endif

	pop	ix
#endasm

}

/*** BeginHeader md5_init */
void md5_init(md5_state_t __far*pms);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
md5_init	                    <MD5.LIB>

SYNTAX: 			void md5_init(md5_state_t *pms);

DESCRIPTION:   Initilize the MD5 hash process. Initial values are
               generated, and this structure will identify a particular
               transaction in all subsequent calls to the md5 library.

               The typical sequence of calls for hashing a large amount
               of data are:

                 auto md5_state_t  mstate;
                 auto byte          result[16];

                 md5_init(&mstate);
                 while (<more data>)
                   md5_append(&mstate, data, data_length);
                 md5_finish(&mstate, result);

PARAMETER1:		A md5_state_t structure, that is user provided.

SEE ALSO:		md5_append, md5_finish

END DESCRIPTION **********************************************************/

__nodebug void md5_init(md5_state_t __far*pms)
{
	pms->count[0] = pms->count[1] = 0;
	pms->abcd[0] = 0x67452301;
	pms->abcd[1] = 0xefcdab89;
	pms->abcd[2] = 0x98badcfe;
	pms->abcd[3] = 0x10325476;
}

/*** BeginHeader md5_append */
void md5_append(md5_state_t __far*pms, const char __far *data, word nbytes);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
md5_append	                    <MD5.LIB>

SYNTAX: void md5_append(md5_state_t *pms, const char far*data, word nbytes);

DESCRIPTION:   This function will take a buffer and compute the MD5
					hash of it, combined with the hash of all previous data
					passed to it. This function can be called several times,
					to generate the hash of a large amount of data.

PARAMETER1:		The md5 id structure, as passed to md5_init.
PARAMETER2:		The buffer to add to the hash.
PARAMETER3:		Number of bytes in the buffer to add to the hash (0-
               32768 inclusive).  Lengths greater than 32768 are
               invalid, and the results are undefined.

SEE ALSO:		md5_init, md5_finish

END DESCRIPTION **********************************************************/

__nodebug void md5_append(md5_state_t __far*pms, const char __far *data, word nbytes)
{
	auto const byte __far*p;
	auto word left;
	auto word offset;
	auto md5_long nbits;
	auto word copy;

	p = data;
	left = nbytes;
	offset = (word)(pms->count[0] >> 3) & 63;
	nbits = (md5_long)nbytes << 3;

	if (!nbytes || nbytes > 32768)
		return;

	/* Update the message length. */
	pms->count[0] += nbits;
	if (pms->count[0] < nbits)
		pms->count[1]++;

	/* Process an initial partial block. */
	if (offset) {
		copy = (offset + nbytes > 64 ? 64 - offset : nbytes);

		_f_memcpy(pms->buf + offset, p, copy);
		if (offset + copy < 64)
			return;
		p += copy;
		left -= copy;
		md5_process(pms, pms->buf);
	}

	/* Process full blocks. */
	for (; left >= 64; p += 64, left -= 64)
		md5_process(pms, p);

	/* Process a final partial block. */
	if (left)
		_f_memcpy(pms->buf, p, left);
}

/*** BeginHeader md5_finish */
void md5_finish(md5_state_t __far*pms, char __far *digest);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
md5_finish	                    <MD5.LIB>

SYNTAX: 			void md5_finish(md5_state_t *pms, char far *digest)

DESCRIPTION:   After md5_append has been called one or more times, this
					finish function can be called to return the computed
					MD5 hash of the data.

PARAMETER1:		The md5 id structure, as passed to md5_init.
PARAMETER2:		The buffer to store the resulting MD5 hash into.  Must
					be exactly 16 bytes length.

SEE ALSO:		md5_init, md5_append, md5_sofar

END DESCRIPTION **********************************************************/

__nodebug void md5_finish(md5_state_t __far*pms, char __far *digest)
{
	static const __far byte pad[64] = {
		0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	};
	auto byte data[8];
	auto int i;

	/* Save the length before padding. */
	_f_memcpy(data, pms->count, 8);
	/* Pad to 56 bytes mod 64. */
	md5_append(pms, pad, (word)((55 - (pms->count[0] >> 3)) & 63) + 1);
	/* Append the length. */
	md5_append(pms, data, 8);
	_f_memcpy(digest, pms->abcd, 16);
}

/*** BeginHeader md5_sofar */
void md5_sofar(md5_state_t __far*pms, char __far *digest);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
md5_sofar	                    <MD5.LIB>

SYNTAX: 			void md5_sofar(md5_state_t *pms, char far *digest)

DESCRIPTION:   Similar to md5_finish, except that the digest "so far" is
               obtained without altering the state.  This is used in
               some protocols such as TLS.  It allows several digests
               to be obtained from the same data stream at various points,
               which is more efficient than running several digests of
               the same data stream in parallel.

PARAMETER1:		The md5 id structure, as passed to md5_init.
PARAMETER2:		The buffer to store the resulting MD5 hash into.  Must
					be exactly 16 bytes length.

SEE ALSO:		md5_init, md5_append, md5_finish

END DESCRIPTION **********************************************************/

__nodebug void md5_sofar(md5_state_t __far*pms, char __far *digest)
{
	md5_state_t temp;
	_f_memcpy(&temp, pms, sizeof(temp));
	md5_finish(&temp, digest);
}

/*** BeginHeader hmac_md5 */

void hmac_md5(const unsigned char __far*, unsigned int,
					const unsigned char __far*, unsigned int, unsigned char __far*);
/*** EndHeader */

/*
** Function: hmac_md5
** modified version from RFC 2104
*/

void
hmac_md5(
	const unsigned char __far*	text,		/* pointer to data stream */
	unsigned int	text_len,	/* length of data stream */
	const unsigned char __far*	key,		/* pointer to authentication key */
	unsigned int	key_len,	/* length of authentication key */
	unsigned char __far	digest[16])		/* caller digest to be filled in */
{
	md5_state_t context;
	unsigned char k_ipad[64];    /* inner padding - key XORd with ipad */
	unsigned char k_opad[64];    /* outer padding - key XORd with opad */
	unsigned char tk[16];
	int i;

	/* if key is longer than 64 bytes reset it to key=MD5(key) */
	if (key_len > 64) {
		md5_init(&context);
		md5_append(&context, key, key_len);
		md5_finish(&context, tk);

		key = tk;
		key_len = 16;
	}

	/*
	 * the HMAC_MD5 transform looks like:
	 *
	 * MD5(K XOR opad, MD5(K XOR ipad, text))
	 *
	 * where K is an n byte key
	 * ipad is the byte 0x36 repeated 64 times
	 * opad is the byte 0x5c repeated 64 times
	 * and text is the data being protected
	 */

	/* XOR key with ipad and opad values */
	for (i=0; i<64; i++) {
		if (i < key_len) {
	      k_ipad[i] = key[i] ^ 0x36;
	      k_opad[i] = key[i] ^ 0x5c;
		} else {
			k_ipad[i] = 0x36;
			k_opad[i] = 0x5c;
		}
	}
	/*
	 * perform inner MD5
	 */
	md5_init(&context);                   /* init context for 1st pass */
	md5_append(&context, k_ipad, 64);     /* start with inner pad */
	md5_append(&context, text, text_len); /* then text of datagram */
	md5_finish(&context, digest);         /* finish up 1st pass */
	/*
	 * perform outer MD5
	 */
	md5_init(&context);                   /* init context for 2nd pass */
	md5_append(&context, k_opad, 64);     /* start with outer pad */
	md5_append(&context, digest, 16);     /* then results of 1st hash */
	md5_finish(&context, digest);         /* finish up 2nd pass */
}




/*** BeginHeader md5_vector */
void md5_vector(size_t num_elem, const char __far * __far * addr, const size_t __far *len, char __far *mac);
/*** EndHeader */
__nodebug
void md5_vector(size_t num_elem, const char __far * __far * addr, const size_t __far *len, char __far *mac)
{
	auto word i;
	auto md5_state_t pms;

	md5_init(&pms);
	for (i = 0; i < num_elem; ++i)
		md5_append(&pms, addr[i], len[i]);
	md5_finish(&pms, mac);
}

/*** BeginHeader */
#endif
/*** EndHeader */

