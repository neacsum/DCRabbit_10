/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
//
// Embedded 802.11 wireless network interface
// MAC layer hardware interface
//
// This library includes RF UBEC chip manual calibration routines used
// by the WiFi driver.

/*** BeginHeader */
#ifndef __WIFI_UBEC_MCAL_LIB
#define __WIFI_UBEC_MCAL_LIB

/*** EndHeader */


/*** BeginHeader  _wifi_radio_calibration, _wifi_vcoBandTable,
						_wifi_vcoRegTable, _wifi_vcoCurrentTable */

extern int _wifi_radio_calibration[14];
extern const int _wifi_vcoBandTable[];
extern const uint32 _wifi_vcoRegTable[];
extern const int _wifi_vcoCurrentTable[];
/*** EndHeader */


// VCO calibration settings for all channels
int _wifi_radio_calibration[14];

const int _wifi_vcoBandTable[] = {
	0x41,
	0x61,
	0x51,
	0x71,
	0x49,
	0x69,
	0x59,
	0x79,
	0x45,
	0x65,
	0x55,
	0x75,
	0x4D,
	0x6D,
	0x5D,
	0x7D,
	0x43,
	0x63,
	0x53,
	0x73,
	0x4B,
	0x6B,
	0x5B,
	0x7B,
	0x47,
	0x67,
	0x57,
	0x77,
	0x4F,
	0x6F,
	0x5F,
	0x7F
};

const uint32 _wifi_vcoRegTable[] = {
	0x46643,
   0x46643,
   0x46043,
   0x46043,
   0x4667D,
   0x4667D,
   0x4647D,
   0x4607D,
   0x4665D,
   0x4665D,
   0x4645D,
   0x4647D,
   0x4667D,
   0x4667D
};

const int _wifi_vcoCurrentTable[] = {
	0x00,
	0x02,
	0x03
};



/*** BeginHeader _wifi_channelTable */
struct _wifi_Radio_Command {
	uint8 address;
	uint32 value;
};

extern const struct _wifi_Radio_Command * const _wifi_channelTable[14];

// Number of commands with each set of radio commands
#define _WIFI_NUM_RADIO_COMMANDS		6

/*** EndHeader */

struct _wifi_Radio_Command const _wifi_setch1[] = {
   { 0x1, 0x00047 },    // Synthesizer integer
	{ 0x2, 0x00999 },    // Synthesizer fractional
	{ 0x3, 0x46643 },   	// VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25F94 },    // VCO Calibration (wait > 40 usecs.)
 	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};

struct _wifi_Radio_Command const _wifi_setch2[] = {
   { 0x1, 0x00047 },    // Synthesizer integer
	{ 0x2, 0x0099B },    // Synthesizer fractional
	{ 0x3, 0x46643 },   	// VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25FB4 },    // VCO Calibration (wait > 40 usecs.)
 	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};

struct _wifi_Radio_Command const _wifi_setch3[] = {
   { 0x1, 0x00067 },    // Synthesizer integer
	{ 0x2, 0x00998 },    // Synthesizer fractional
	{ 0x3, 0x46043 },   	// VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25F94 },    // VCO Calibration (wait > 40 usecs.)
 	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};

struct _wifi_Radio_Command const _wifi_setch4[] = {
   { 0x1, 0x00067 },    // Synthesizer integer
	{ 0x2, 0x0099A },    // Synthesizer fractional
	{ 0x3, 0x46043 },    // VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25F94 },    // VCO Calibration (wait > 40 usecs.)
 	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};

struct _wifi_Radio_Command const _wifi_setch5[] = {
   { 0x1, 0x00067 },    // Synthesizer integer
	{ 0x2, 0x00999 },    // Synthesizer fractional
	{ 0x3, 0x4667D },    // VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25F94 },    // VCO Calibration (wait > 40 usecs.)
 	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};

struct _wifi_Radio_Command const _wifi_setch6[] = {
   { 0x1, 0x00067 },    // Synthesizer integer
	{ 0x2, 0x0099B },    // Synthesizer fractional
	{ 0x3, 0x4667D },    // VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25F94 },    // VCO Calibration (wait > 40 usecs.)
 	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};

struct _wifi_Radio_Command const _wifi_setch7[] = {
   { 0x1, 0x00057 },    // Synthesizer integer
	{ 0x2, 0x00998 },    // Synthesizer fractional
	{ 0x3, 0x4647D },    // VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25F94 },    // VCO Calibration (wait > 40 usecs.)
 	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};

struct _wifi_Radio_Command const _wifi_setch8[] = {
   { 0x1, 0x00057 },    // Synthesizer integer
	{ 0x2, 0x0099A },    // Synthesizer fractional
	{ 0x3, 0x4607D },    // VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25F94 },    // VCO Calibration (wait > 40 usecs.)
 	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};

struct _wifi_Radio_Command const _wifi_setch9[] = {
   { 0x1, 0x00057 },    // Synthesizer integer
	{ 0x2, 0x00999 },    // Synthesizer fractional
	{ 0x3, 0x4665D },    // VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25F94 },    // VCO Calibration (wait > 40 usecs.)
 	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};

struct _wifi_Radio_Command const _wifi_setch10[] = {
   { 0x1, 0x00057 },    // Synthesizer integer
	{ 0x2, 0x0099B },    // Synthesizer fractional
	{ 0x3, 0x4665D },    // VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25F94 },    // VCO Calibration (wait > 40 usecs.)
 	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};

struct _wifi_Radio_Command const _wifi_setch11[] = {
   { 0x1, 0x00077 },    // Synthesizer integer
	{ 0x2, 0x00998 },    // Synthesizer fractional
	{ 0x3, 0x4645D },    // VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25F94 },    // VCO Calibration (wait > 40 usecs.)
 	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};

struct _wifi_Radio_Command const _wifi_setch12[] = {
	{ 0x1, 0x00077 },		// Synthesizer integer
	{ 0x2, 0x0099A },		// Synthesizer fractional
	{ 0x3, 0x4647D },    // VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25F94 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};

struct _wifi_Radio_Command const _wifi_setch13[] = {
	{ 0x1, 0x00077 },		// Synthesizer integer
	{ 0x2, 0x00999 },		// Synthesizer fractional
	{ 0x3, 0x4667D },    // VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25F94 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};

struct _wifi_Radio_Command const _wifi_setch14[] = {
	{ 0x1, 0x0004f },		// Synthesizer integer
	{ 0x2, 0x00ccc },		// Synthesizer fractional
	{ 0x3, 0x4667D },    // VCO reg
	{ 0x0, 0x25F98 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x25F94 },    // VCO Calibration (wait > 40 usecs.)
	{ 0x0, 0x27FD4 },    // VCO Calibration (wait > 40 usecs.)
};


const struct _wifi_Radio_Command * const _wifi_channelTable[14] = {
	_wifi_setch1,
	_wifi_setch2,
	_wifi_setch3,
	_wifi_setch4,
	_wifi_setch5,
	_wifi_setch6,
	_wifi_setch7,
	_wifi_setch8,
	_wifi_setch9,
	_wifi_setch10,
	_wifi_setch11,
	_wifi_setch12,
	_wifi_setch13,
	_wifi_setch14
};



/*** BeginHeader _wifi_executeRF */
void _wifi_executeRF(const struct _wifi_Radio_Command commands[], int numCommands);
/*** EndHeader */

//
// Execute a radio command sequence
//
_wifig_nodebug
void _wifi_executeRF(const struct _wifi_Radio_Command commands[], int numCommands)
{
	auto int i;

   for (i = 0; i < numCommands; i++) {
   	_wifi_WriteRF(commands[i].address, commands[i].value);
   }
}


/*** BeginHeader _wifi_SetVCO */
void _wifi_SetVCO(int setting);
/*** EndHeader */

#define _WIFI_RADIO_VCO_BASE	0x46041
_wifig_nodebug
void _wifi_SetVCO(int setting)
{
	auto uint32 reg;
	auto int vcoCurrent;
	auto int vcoBand;

	vcoBand = setting / 3;
	vcoCurrent = setting % 3;
   reg = _WIFI_RADIO_VCO_BASE |
         (_wifi_vcoCurrentTable[vcoCurrent] << 9) |
         _wifi_vcoBandTable[vcoBand];

   _wifi_WriteRF(0x3, reg);
}



/*** BeginHeader _wifi_SetChannelNoVCO */
void _wifi_SetChannelNoVCO (int channel);
/*** EndHeader */

//
// Select a channel without setting VCO voltage
// @param channel Channel number: 1-14
//
_wifig_nodebug
void _wifi_SetChannelNoVCO (int channel)
{
   _wc_and32(NCGC0R, ~_WIFI_GEN_RXEN);

	_wifi_executeRF(_wifi_channelTable[channel-1], _WIFI_NUM_RADIO_COMMANDS);

   _wc_or32(NCGC0R, _WIFI_GEN_RXEN);
}



/*** BeginHeader _wifi_CalibrateRadio */
void _wifi_CalibrateRadio(void);
#define _WIFI_VCO_BUMP	2
/*** EndHeader */

_wifig_nodebug
void _wifi_CalibrateRadio(void)
{
	auto int i;
	auto int retval;
	auto uint16 bitcheck;

	// Iterate through the channels
	bitcheck = 0x0001;
	for (i = 0; i < 14; i++) {
		// Only calibrate channels within the channel mask
		if (bitcheck & _wifi_macParams.chan_mask) {
	      _wifi_SetChannelNoVCO(i+1);
	      retval = _wifi_CalibrateChannel(i+1);
	      if (retval < 0) {
	         DPRINTF2("ERROR:  VCO calibration of channel %d failed!\n", i+1);
	      }
	      _wifi_radio_calibration[i] = retval;
	   }
	   bitcheck <<= 1;
	}
}


/*** BeginHeader _wifi_CalibrateChannel */
int _wifi_CalibrateChannel(int channel);
/*** EndHeader */

_wifig_nodebug
int _wifi_CalibrateChannel(int channel)
{
	auto int setting;
	auto int maxSetting;
	auto int lockSetting;

	setting = 0;
	// 32 possible band settings, 3 possible current settings
	maxSetting = (32 * 3) - 1;
	for (setting = 0; setting <= maxSetting; setting++) {
		_wifi_SetVCO(setting);
      // Wait to allow VCO to settle
      _wifi_waitUS(_WIFI_VCO_INITIAL_DELAY);
      // Check if we are locked
      if (_wifi_CheckLock()) {
         DPRINTF3("*** Lock at VCO band %d ; VCO current %d\n", setting / 3,
                  setting % 3);
         break;
      }
	}
	// Check if VCO selection failed
	if (setting > maxSetting) {
		DPRINTF("*** VCO band and current selection failed!\n");
		return -1;
	}
   // Save the setting at which we first locked
   lockSetting = setting;
   // Bump the results
   setting += _WIFI_VCO_BUMP;
	// Do not pick the lowest current setting--this results in decreased
	// performance
   if((setting % 3) == 0)
   	setting++;

   // Make sure we have not gone beyond the maximum value
   if (setting > maxSetting) {
      setting = maxSetting;
   }
   // If we don't lock at the bumped value (maybe we overshot the valid range?),
   // then start stepping back until we reach another lock
	_wifi_SetVCO(setting);
     _wifi_waitUS(_WIFI_VCO_INITIAL_DELAY);
   while (!_wifi_CheckLock() && (setting >= lockSetting)) {
   	DPRINTF("Lock after VCO bump failed; trying lower setting\n");
   	setting--;
		_wifi_SetVCO(setting);
      _wifi_waitUS(_WIFI_VCO_INITIAL_DELAY);
   }
   // Oddly, we didn't lock even at the original lock setting.  Just return the
   // original lock setting as it's the best we can do.
   if (setting < lockSetting) {
   	return lockSetting;
   }
   // Return the calibration setting we've found
   return setting;
}


/*** BeginHeader _wifi_init_manual_cal */
void _wifi_init_manual_cal(void);
/*** EndHeader */

_wifig_nodebug
void _wifi_init_manual_cal(void)
{
	auto int i;

	_wifi_WriteRF(4, 0x0007b);
	// This sets radio register 5
	_wc_SetTxPower(13);

   _wifi_WriteRF(0x6, 0xf81ac);    // Filter Register
	_wifi_WriteRF(0x0, 0x27fdc);    // Mode Control - Calibrate Filter (wait > 10 usecs.)
   _wifi_waitUS (12u);
	_wifi_WriteRF(0x0, 0x27fd4);    // Mode Control - RX/TX mode

   for (i = 0; i < WLN_CHAN_NUM; i++) {
      _wifi_radio_calibration[i] = -1;
	}

	// Calibrate VCO voltages
	_wifi_CalibrateRadio();
}

/*** BeginHeader _wifi_manual_cal_channel */
void _wifi_manual_cal_channel(int channel);
/*** EndHeader */

// Number of microseconds to wait for the channel to change
#define _WIFI_CHANNEL_DELAY	40

_wifig_nodebug
void _wifi_manual_cal_channel(int channel)
{
	// Set the channel
	_wifi_executeRF(_wifi_channelTable[channel-1], _WIFI_NUM_RADIO_COMMANDS);
   _wifi_waitUS(_WIFI_CHANNEL_DELAY);

	// Check if this channel has been calibrated
	if ((_wifi_radio_calibration[channel-1] == -1) ||
	    (!_wifi_CheckLock())) {
		// Calibrate the channel
		_wifi_radio_calibration[channel-1] = _wifi_CalibrateChannel(channel);
	}

	// Set the VCO voltage
	_wifi_SetVCO(_wifi_radio_calibration[channel-1]);
}


/*** BeginHeader */
#endif /* __WIFI_UBEC_MCAL_LIB */
/*** EndHeader */

