/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
//
// Embedded 802.11 wireless network interface
// MAC layer hardware interface
//
// This library includes RF UBEC chip manual calibration routines used
// by the WiFi driver.

/*** BeginHeader */
#ifndef __WIFI_UBEC_PIPER_LIB
#define __WIFI_UBEC_PIPER_LIB
/*** EndHeader */

/*** BeginHeader UBEC_PWR_SETTING, UBEC_TEST_REG */
#define UBEC_PWR_SETTING 0x39ee0
#define UBEC_TEST_REG    0x3fffe
/*** EndHeader */

/*** BeginHeader freqTable, ubec_pwr*/
extern unsigned long pwr_reg5;
extern unsigned long test_reg7;

struct _wifi_freq_divider{
    unsigned int integer;
    unsigned int fraction;
};


struct wifi_rf_power {
	uint8 			index;
	unsigned long   reg;
};

extern int _wifi_auto_calibration;
extern struct _wifi_freq_divider const freqTable[];
extern struct wifi_rf_power const ubec_pwr[];

/*** EndHeader */

unsigned long pwr_reg5;
unsigned long test_reg7;

// Flag used for selecting channel calibration method
int _wifi_auto_calibration;

// RF transceiver frequency divider for each channel
struct _wifi_freq_divider const freqTable[] = {
    { 0, 0 },
    { 0x6847, 0x0999 }, // 1 (2412 MHz)
    { 0x6847, 0x099b }, // 2 (2417 MHz)
    { 0x6867, 0x0998 }, // 3
    { 0x6867, 0x099a }, // 4
    { 0x6867, 0x0999 }, // 5
    { 0x6867, 0x099b }, // 6
    { 0x6857, 0x0998 }, // 7
    { 0x6857, 0x099a }, // 8
    { 0x6857, 0x0999 }, // 9
    { 0x6857, 0x099b }, // 10
    { 0x6877, 0x0998 }, // 11
    { 0x6877, 0x099a }, // 12
    { 0x6877, 0x0999 }, // 13 (2472 MHz)
    { 0x684f, 0x0ccc }, // 14 (2484 MHz)
};

struct wifi_rf_power const ubec_pwr[] = {
	{ 0 , 0x0fffe},   // 0
   { 1 , 0x0fffe },  // 1
	{ 3 , 0x0fffe },  // 2
	{ 5 , 0x0fffe },  // 3
	{ 7 , 0x0fffe },  // 4
	{ 4 , 0x1fffe },  // 5
	{ 5 , 0x1fffe },  // 6
	{ 7 , 0x1fffe },  // 7
	{ 8 , 0x17ffe },  // 8
	{ 9 , 0x17ffe },  // 9
	{ 11 , 0x17ffe },  // 10
	{ 13 , 0x17ffe },  // 11
	{ 15 , 0x17ffe },  // 12
	{ 13 , 0x1fffe },  // 13
	{ 14 , 0x1fffe },  // 14
   { 15 , 0x1fffe },  // 15
};




/*** BeginHeader __wifi_SetChannel */
void __wifi_SetChannel (int channel);
/*** EndHeader */

//
// Select a channel
// @param channel Channel number: 1-14
//

_wifig_nodebug
void __wifi_SetChannel (int channel)
{
	// Set frequency divider for channel
#ifdef PIPER_FPGA
	#warnt "Assuming 40MHz clock for Ubec!"
	_wifi_WriteRF (1, freqTable[channel].integer);
#else
	_wifi_WriteRF (1, (freqTable[channel].integer | 0x100L));
#endif

  	_wifi_WriteRF (2, freqTable[channel].fraction);

  	_wifi_WriteRF (0, 0x25f9c);
  	_wifi_waitUS (12);
  	_wifi_WriteRF (0, 0x25f9a);
  	_wifi_waitUS (84);
  	_wifi_WriteRF (0, 0x25f94);
  	_wifi_waitUS (12);

   #ifdef WIFI_REGION_VERBOSE
   printf("Set WiFi Channel, ch=%d\n", channel );
   #endif
}

/*** BeginHeader __wifi_RFChipInit */
void __wifi_RFChipInit (void);
/*** EndHeader */

//
// Initialize UBEC RF Chip
//

_wifig_nodebug
void __wifi_RFChipInit (void)
{
   #GLOBAL_INIT{pwr_reg5=UBEC_PWR_SETTING;}
   #GLOBAL_INIT{test_reg7=UBEC_TEST_REG;}

	// Initialize RF tranceiver
   // Write out the SPI Control Register
   _wc_write8(NCSPICR, _WIFI_SPI_CTRL_LEN);
   _wifi_waitUS (10);

   _wifi_WriteRF (0, 0x27FDE );  // Reset UBEC
   _wifi_waitUS (100);

  	_wifi_WriteRF (7, test_reg7); // test
  	_wifi_WriteRF (6, 0xf81ac); // filter register
  	_wifi_WriteRF (5, pwr_reg5); // transmitter gain
  	_wifi_WriteRF (4, 0x0002b); // receiver gain
  	_wifi_WriteRF (3, 0x46622); // vco control
  	_wifi_WriteRF (0, 0x25f9c); // mode control
  	_wifi_waitUS (10);
}

/*** BeginHeader __wifi_SetPower */
void __wifi_SetPower (int value);

extern const uint32 _wifi_UbecPwrTable[];
/*** EndHeader */

// RF transceiver transmitter gain for each power level.
// This is the 0-15 power level, bit reversed.
const uint32 _wifi_UbecPwrTable[] = {
	0x0, 0x8, 0x4, 0xc, 0x2, 0xa, 0x6, 0xe,
	0x1, 0x9, 0x5, 0xd, 0x3, 0xb, 0x7, 0xf
};
//
// Set Wifi RF power level
//

_wifig_nodebug
void __wifi_SetPower (int value)
{
	auto int index;

   if (value >= 0 && value < 16)
	{
      #ifdef WIFI_REGION_VERBOSE
      printf("Set TxPower, Index=%d\n",value);
      #endif


		_wifi_WriteRF (7, ubec_pwr[value].reg);
    	index  = ubec_pwr[value].index;
    	_wifi_WriteRF (5, (UBEC_PWR_SETTING) |
      					_wifi_UbecPwrTable[index]); // transmitter gain

      #ifdef WIFI_REGION_VERBOSE
      printf("Set TxPower, Index=%d\n",value);
      #endif

	}
}



/*** BeginHeader */
#endif /* __WIFI_UBEC_PIPER_LIB */
/*** EndHeader */

