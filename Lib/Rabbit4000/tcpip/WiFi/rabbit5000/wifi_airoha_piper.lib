/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*
   Embedded 802.11 wireless network interface
   MAC layer hardware interface

   This library contains all register initialization and control
   for the Airoha RF chip.
*/

/*** BeginHeader */
#ifndef __WIFI_AIROHA_PIPER_LIB
#define __WIFI_AIROHA_PIPER_LIB
/*** EndHeader */

/*** BeginHeader _wifi_rawdata, _wcal, _wapc  */

// Note: Bit 10 is set for RF Pwr gain to be set by register
#define AIROHA_PWR_SETTING  0x054409
#define AIROHA_PWR_CONTROL


// PABias setting
#define _WIFI_PABIAS_A1		0
#define _WIFI_PABIAS_A2		4


// Added to control PA Bias Settings on CONFIG3
#define AIROHA_CONFIG3 	0x090024
#define AIROHA_CONFIG10	0x001bba


#if RCM5400W_SERIES
	// Power control loop gain factor for customer index's 0 - 15
	#ifndef _WIFI_PWR_GAIN
	#define _WIFI_PWR_GAIN     1.14 			// Set for PSK_CCK data transmissions
	#endif
   #define _WIFI_POWER_DELTA	2

#elif RCM5600W_SERIES
// Power control loop gain factor for customer index's 0 - 15
	#ifndef _WIFI_PWR_GAIN
	#define _WIFI_PWR_GAIN     (17.0/15.0) // Set for PSK_CCK data transmissions
	#endif
   #define _WIFI_POWER_DELTA	3
#endif

// Power control loop Airoha index range for setting initial power level,
// if the RF power calibration hasn't been done or is in-valid.
#ifndef _WIFI_MAX_AIROHA_INDEX
   #ifndef WIFI_ENGINEERING_DEBUG
      #define _WIFI_MAX_AIROHA_INDEX 38   // -9dBm down from Max range of 63
   #else
      #define _WIFI_MAX_AIROHA_INDEX 63
   #endif
#endif

// Cable loss for Debug display
#ifndef _WIFI_CABLE_LOSS
#define _WIFI_CABLE_LOSS  1.62
#endif

// ADC accept range when initial setting of the RF power
#ifndef _WIFI_ADC_ACCEPT_RANGE
#define _WIFI_ADC_ACCEPT_RANGE  3
#endif

// Pwr accept range when initial setting of the RF power
#ifndef _WIFI_PWR_ACCEPT1
#define _WIFI_PWR_ACCEPT1  0.2
#endif

// Pwr accept range after setting the RF power
#ifndef _WIFI_PWR_ACCEPT2
#define _WIFI_PWR_ACCEPT2  0.4
#endif


#if RCM5400W_SERIES
   // Typical Airoha Power Resolution for changing of RF_Index
	#ifndef _WIFI_PWR_RESOLUTION
	#define _WIFI_PWR_RESOLUTION  0.6
	#endif
#elif RCM5600W_SERIES
	// Typical Airoha Power Resolution for changing of RF_Index
	#ifndef _WIFI_PWR_RESOLUTION
	#define _WIFI_PWR_RESOLUTION  0.8
	#endif
#endif


#if RCM5400W_SERIES
	// Power control loop power thresold trigger (dBm)
	#define _WIFI_PWR_THRESHOLD   8.0
#elif RCM5600W_SERIES
	// Power control loop power thresold trigger (dBm)
	#define _WIFI_PWR_THRESHOLD   7.0
#endif


// ADC value where the PDOut power is readable
#define _WIFI_ADC_THRESHOLD    0x50

// ADC averaging cycle control
#ifndef _WIFI_ADC_AVG_COUNT
#define _WIFI_ADC_AVG_COUNT   3
#endif

// Power Control Loop interval trigger, default is set for 15 second
#ifndef _WIFI_PWR_CAL_PERIOD
#define _WIFI_PWR_CAL_PERIOD   15
#endif

// Set timeout for 5 seconds
#ifndef _WIFI_PWR_CAL_TIMEOUT
#define _WIFI_PWR_CAL_TIMEOUT  5
#endif

// Set debounce for 5 ms
#ifndef _WIFI_PWR_CAL_DEBOUNCE
#define _WIFI_PWR_CAL_DEBOUNCE  5
#endif

// Set inactivity timeout for 1 hour
#ifndef _WIFI_INACTIVITY_PERIOD
#define _WIFI_INACTIVITY_PERIOD  (60*60)
#endif

// TX_START interrupt status bit fields
#define _TX_START_DISABLE   0x00
#define _TX_START_ENABLE    0x01
#define _TX_MODULATION_BIT  0x02
#define _TX_INTERRUPT_BIT   0x04

// Modulation identifier
#define _WIFI_PSK_CCK    0
#define _WIFI_OFDM       1


// ADC discount averaging Alpha value
#ifndef _WIFI_DISCOUNT_ALPHA
#define _WIFI_DISCOUNT_ALPHA  0.002
#endif

// Spi port settings
#define _WIFI_SF_SPI_CLOCKMODE 3
#define _WIFI_SF_SPI_DIVISOR 0
#define _WIFI_SF_SPI_CONTROL_VALUE 0x0C

// Serial port register offsets
#define _WIFI_SF_SR_OFFSET 3
#define _WIFI_SF_CR_OFFSET 4
#define _WIFI_SF_ER_OFFSET 5

// Serial port register
#define _WIFI_SF_SERPORT_TR 5
#define _WIFI_SF_SERPORT_TR_REG TAT5R
#define _WIFI_SF_SERPORT_TR_SHADOW TAT5RShadow

#ifndef WIFI_MANUFACTURING_TEST
#define _WIFI_TX_ON_STATUS		0
#else
#define _WIFI_TX_ON_STATUS (_wc_read32(0x8) & 0x00100000)
#endif


// Airoha Pwr control states
enum {
	WIFI_APC_START,		  // APC state to set timeout and begin APC control
   WIFI_APC_ADC_LOOP,     // APC state to initialize state machine values
   WIFI_APC_ADC_AVG,      // APC state to validate ADC readings
   WIFI_APC_ADJUST_PWR,   // APC Airoha Power Adjustment/Limit check state
   WIFI_APC_DEBOUNCE,     // APC state for debouncing between iterations
   WIFI_APC_COMPLETE,     // APC completed state, sets up next interval period
   WIFI_APC_INTERVAL_TRIGGER, // APC state to check when to kick-off next cycle
};

#use "bootdev_sf_api.lib"
#use "idblock_api.lib"
#ifndef __WIFI_MAC_WEP_LIB
#use "wifi_mac_wep.lib"       // Needed for CRC routine
#endif

typedef struct
{
   float slope;      // Calibration slope and intercept coefficients
   float intercept;
   char maxIndex;     // Max Airoha Index used for manufacturing calibration
#if RCM5600W_SERIES
   float LoOffset;
   float HiOffset;
#endif
   long crc;          // CRC
} WiFiPwrCal;

typedef struct {
	int  Channel;
   int  LastChannel;
	int  CpuFullSpeed;
   int  State;
   int  AvgData;
   int  AvgCycles;
   int  AvgHistory;
   int  AirohaIndex;
   int  CustIndex;
   int  Modulation;
   int  Enable;
   int  Interrupt;
   int  TargetIndex;
   int  CalIndex;
   int  ForceADCRead;
   int  TrackUpDown;
   int  NewPwrLevel;
   char Rawdata;
   longword Inactivity;
   longword CalTimeout;
   longword Debounce;
} WifiPwrCntrl;

struct _wifi_freq_divider{
    unsigned long integer;
    unsigned long fraction;
};

extern WiFiPwrCal   _wcal[2];
extern WifiPwrCntrl _wapc;
extern int const _wPwr[];
extern struct _wifi_freq_divider const _wifi_freqTable[];
extern long time1;
extern long time2;

/*** EndHeader */

long starttimestamp;
long endtimestamp;

long time1;
long time2;

// Array for RF power calibration data
WiFiPwrCal   _wcal[2];

// APC state machine structure
WifiPwrCntrl _wapc;


#if RCM5600W_SERIES
// Airoha power settings, initial setting are intentionally set low to
// assure we stay within Airoha chip-to-chip process variance.
int const _wPwr[] =
{
    0,  21, 23, 25,
   26,  28, 30, 32,
   34,  36, 38, 40,
   42,  44, 46, 48,
};
#else
// Airoha power settings, initial setting are intentionally set low to
// assure we stay within Airoha chip-to-chip process variance.
int const _wPwr[] =
{
    0,  6, 11, 13,
   16, 18, 20, 22,
   24, 26, 28, 30,
   32, 34, 36, 38,
};
#endif


// RF transceiver frequency divider for each channel
struct _wifi_freq_divider const _wifi_freqTable[] = {
    { 0, 0 },  // Channel setting for 20Mhz XO
    { 0x01f790, 0x033331 }, // 1 (2412 MHz)
    { 0x01f790, 0x0b3331 }, // 2 (2417 MHz)
    { 0x01e790, 0x033331 }, // 3
    { 0x01e790, 0x0b3331 }, // 4
    { 0x01f7a0, 0x033331 }, // 5
    { 0x01f7a0, 0x0b3331 }, // 6
    { 0x01e7a0, 0x033331 }, // 7
    { 0x01e7a0, 0x0b3331 }, // 8
    { 0x01f7b0, 0x033331 }, // 9
    { 0x01f7b0, 0x0b3331 }, // 10
    { 0x01e7b0, 0x033331 }, // 11
    { 0x01e7b0, 0x0b3331 }, // 12
    { 0x01f7c0, 0x033331 }, // 13 (2472 MHz)
    { 0x01e7c0, 0x066661 }, // 14 (2484 MHz)
};


/*** BeginHeader _wifi_swap_airoha */
unsigned long _wifi_swap_airoha(unsigned long inp);
/*** EndHeader */
//
// Swap data for Piper SPI port
//
_wifig_nodebug
unsigned long _wifi_swap_airoha(unsigned long inp)
{
   return ((inp & 0xF00ul) |
           (inp << 16) & 0xF0000ul | (inp << 8 ) & 0x0F000ul |
           (inp >> 8 ) & 0x000F0ul | (inp >> 16) & 0x0000Ful);
}

/*** BeginHeader _wifi_Airoha */
void _wifi_Airoha(unsigned long);
/*** EndHeader */
//
// Re-format data for Piper SPI port
//
_wifig_nodebug
void _wifi_Airoha(unsigned long value)
{
   _wifi_WriteRF ((char) (value & 0xfuL), value);
}


/*** BeginHeader __wifi_SetChannel */
void __wifi_SetChannel (int channel);
/*** EndHeader */
//
// Select a channel
// @param channel Channel number: 1-14
//
_wifig_nodebug
void __wifi_SetChannel (int channel)
{

   // Set frequency divider for channel
   _wifi_Airoha(_wifi_freqTable[channel].integer);
   _wifi_Airoha(_wifi_freqTable[channel].fraction);

	_wapc.Channel = channel;
   #ifdef WIFI_REGION_VERBOSE
   printf("Set WiFi Channel, ch=%d\n", channel );
   #endif

}

/*** BeginHeader __wifi_RFChipInit */
void __wifi_RFChipInit (void);
/*** EndHeader */
//
// Initialize Airoha RF Chip
//
_wifig_nodebug
void __wifi_RFChipInit (void)
{
	auto int i;

#ifdef AIROHA_PWR_CONTROL
   _wifi_AirohaCalEERd();
   BitWrPortI(TACR, &TACRShadow, 0, _WIFI_SF_SERPORT_TR); //use pclk/2 for TATxR
	#if RCM5600W_SERIES
	BitWrPortI(PDDR, &PDDRShadow, 1, 6);
	#else
   BitWrPortI(PCFR, &PCFRShadow, 1, 4);   //set to ser B TX
	#endif
   BitWrPortI(PBDDR, &PBDDRShadow, 1, 0); //make sure CLK(PB0) is output
#endif


   // Initialize RF tranceiver
   // Write out the SPI Control Register
   _wc_write8(NCSPICR, 20);
  	_wifi_waitUS (10);

	//Disable PLL_ON
	#if RCM5600W_SERIES
	_wc_write8(NCOCR1, 0x02);
	#else
   BitWrPortI(PHDR, &PHDRShadow, 0, 2);
	#endif

   //Default Register setting for RFVCC 2.8v @20Mhz XO
   // Note: Reg format D19 - D0
   //                  D3 -  D0  = Reg Address
   //                  D19 - D4  = Reg Data
   _wifi_Airoha(0x01f790); // LSB = Reg Address
   _wifi_Airoha(0x033331);
   _wifi_Airoha(0x00b802);
   _wifi_Airoha(0x00e7f3);
 	#if RCM5600W_SERIES
	_wifi_Airoha(AIROHA_CONFIG3 |
               ((_WIFI_PABIAS_A2 << 7) |
                (_WIFI_PABIAS_A1 << 10)));
	#else
	_wifi_Airoha(0x091224);
	#endif

   _wifi_Airoha(0x0f4dc5);
   _wifi_Airoha(0x0805b6);
   _wifi_Airoha(0x0116c7);
   _wifi_Airoha(0x05b088);
   _wifi_Airoha(AIROHA_PWR_SETTING); // 0 dBm
   _wifi_Airoha(0x001bba);
   _wifi_Airoha(0x000f9b);
   _wifi_Airoha(0x039d8c);
   _wifi_Airoha(0x08000d);
   _wifi_Airoha(0x00587f);

   // Enable PLL and let stabilize
	#if RCM5600W_SERIES
	_wc_write8(NCOCR1, 0x03);
	#else
   BitWrPortI(PHDR, &PHDRShadow, 1, 2);
	#endif
   _wifi_waitUS (200);     // T1 per Airoha Data sheet (150us)

   // Calibrate RF chip TX and filter
   _wifi_Airoha(0x00d87f);
   _wifi_waitUS (80);      // T2 per Airoha Data sheet (50us)


   _wifi_Airoha(0x00787f);
   _wifi_waitUS (80);      // T3 per Airoha Data sheet (50us)

   // Restore default reg value
   _wifi_Airoha(0x00587f);
}

/*** BeginHeader _wifi_rxadcbyte */
int _wifi_rxadcbyte(void);
/*** EndHeader */

#asm __root __nodebug
;;;exit data byte will be in l
_wifi_rxadcbyte::
   ;begin byte receive
	#if RCM5600W_SERIES
	ld		a,0x5C
	#else
   ld    a,0x4C
	#endif
   ioi   ld (SBCR),a
.rxdatafull:
   ioi   ld a,(SBSR)
   bit   7,a
   jr    z,.rxdatafull
   ioi   ld a,(SBDR)          ;get byte from receive data reg
   ld    l,a
   ret
#endasm

/*** BeginHeader _wifi_readadc  */
int _wifi_readadc(void);
/*** EndHeader */
// ADC routine to read voltage of RF PDOUT signal. This routine also
// handles sharing the SPI port.
__nodebug
int _wifi_readadc(void)
{
   auto char rawdata;
   auto char TAT5RShadow_Save;
   auto char SBERShadow_Save;
   auto char SBCRShadow_Save;
   auto char txStatus;

   // Sharing SPI port, save-off current state to restore later
   TAT5RShadow_Save = (char)RdPortI(TAT5R);
   SBERShadow_Save  = (char)RdPortI(SBER);
   SBCRShadow_Save  = (char)RdPortI(SBCR);

   WrPortI(SBDR + _WIFI_SF_CR_OFFSET,
           &SBCRShadow,
           _WIFI_SF_SPI_CONTROL_VALUE);
   WrPortI(SBDR + _WIFI_SF_ER_OFFSET,           // Sets clock mode & reverse bit order
           &SBERShadow,                         // Reverse bit order is a new SPI
           (_WIFI_SF_SPI_CLOCKMODE << 4) + 8);  // feature available on Rabbit 4000.
   WrPortI(TAT5R, &TAT5RShadow, _WIFI_SF_SPI_DIVISOR);

	#if RCM5600W_SERIES
	BitWrPortI(PDDR, &PDDRShadow, 1, 6);	//explicitly disable serial flash chip select
	#endif

#asm __nodebug
.read16:
	;Set ADC chip select low
	#if RCM5600W_SERIES
	ld		de,PDDR
	ld		hl,PDDRShadow
	res	7,(hl)
	#else
   ld 	de,PHDR
	ld 	hl,PHDRShadow
   res	4,(hl)
	#endif
 	ioi 	ldd
   call  _wifi_rxadcbyte         ;read first byte in hl
   ld    e,l                     ;save upper byte
   call  _wifi_rxadcbyte         ;read LS byte
   ld    h,e
   rr    hl                      ;convert to 8-bit data
   rr    hl
   rr    hl
   rr    hl
   ld    a,l
   ld    hl, @sp+rawdata
   add   hl, sp
   ld    (hl), a
	;Set ADC chip select high
	#if RCM5600W_SERIES
	ld		de,PDDR
	ld		hl,PDDRShadow
	set	7,(hl)
	#else
   ld 	de,PHDR
	ld 	hl,PHDRShadow
   set	4,(hl)
	#endif
 	ioi 	ldd
.done:
#endasm

	// Read TX_ON signal status
	txStatus = _wc_read8(NCTXINTR);

   // Restore registers for shared SPI port
   WrPortI(TAT5R, &TAT5RShadow, TAT5RShadow_Save);
   WrPortI(SBDR + _WIFI_SF_ER_OFFSET, &SBERShadow, SBERShadow_Save);
   WrPortI(SBDR + _WIFI_SF_CR_OFFSET, &SBCRShadow, SBCRShadow_Save);

   // Verify that TX_ON is valid, if not exit without updating ADC value
   if((txStatus & 0x08) == 0 && !_WIFI_TX_ON_STATUS)
   {
   	return 0;
   }

   // Update ADC value
  	_wapc.Rawdata = rawdata;
 	return 1;
}

/*** BeginHeader _wifi_setAirohaPwr  */
int _wifi_setAirohaPwr(void);
/*** EndHeader */

_wifig_nodebug
int _wifi_setAirohaPwr(void)
{
   auto float powerLevel, powerCalc, pwrDiff;
   auto float targetPower, SATarget, SAPower;
   auto int  indexOffset;
   auto float PwrCorrection;
   auto channelOffset;

   time2 = SEC_TIMER;
   #ifdef WIFI_AIROHA_PWR_VERBOSE
	printf("\nTimelapse(seconds)= %lu\n\n", (time2-time1));
   #endif
   time1 = time2;

   #ifdef WIFI_AIROHA_PWR_VERBOSE
   printf("v4...Start of APC Routine, RF_Index=%d\n", _wapc.AirohaIndex);
   #endif

   powerLevel = _wcal[0].intercept +
                ((float)_wapc.AvgData/_wcal[0].slope);

   #if RCM5600W_SERIES
   // Power compensation due to RF bandpass filter
   if(_wapc.Channel != 6)
   {
      channelOffset = _wapc.Channel - 6 ;
      if(channelOffset < 0)
   		powerLevel += ((float)channelOffset * _wcal[0].LoOffset);
      else
      	powerLevel -= ((float)channelOffset * _wcal[0].HiOffset);
   }
   #endif

   targetPower = (float)_wapc.CustIndex  * _WIFI_PWR_GAIN;

   // Set to default value
   indexOffset = 1;

   #ifdef WIFI_AIROHA_PWR_VERBOSE
   if(_wapc.Modulation == _WIFI_OFDM)
   {
   	SATarget = targetPower - 3.0;
      SAPower  = powerLevel  - 3.0;
   }
   else
   {
   	SATarget = targetPower;
      SAPower  = powerLevel;
   }
   #endif
   // Allow closed-loop power control for levels of > _WIFI_PWR_THRESHOLD
   if(targetPower  < _WIFI_PWR_THRESHOLD)
  	{
      return WIFI_APC_COMPLETE;
   }

   if((_wapc.TrackUpDown & 0x03) == 0x03)
   {
      #ifdef WIFI_AIROHA_PWR_VERBOSE
      printf("'#'  ADC=%02x RFIndex=%d '%c' Pwr=%.2f TargetPwr=%.2f \n",
             _wapc.AvgData, _wapc.AirohaIndex, _wapc.Modulation ? 'g':'b',
             SAPower, SATarget);
      #endif
      return WIFI_APC_COMPLETE;
   }

   if(!_wapc.NewPwrLevel)
   {
      if(powerLevel > (targetPower - _WIFI_PWR_ACCEPT2) &&
         powerLevel < (targetPower + _WIFI_PWR_ACCEPT2))
      {
         #ifdef WIFI_AIROHA_PWR_VERBOSE
         printf("'=' ADC=%02x RFIndex=%d '%c' Pwr=%.2f TargetPwr=%.2f \n",
                _wapc.AvgData, _wapc.AirohaIndex, _wapc.Modulation ? 'g':'b',
                SAPower, SATarget);
         #endif
         return WIFI_APC_COMPLETE;
      }
      _wifi_initPwrCntrl(TRUE);
      return WIFI_APC_START;
   }
   else
   {
      if(powerLevel > (targetPower - _WIFI_PWR_ACCEPT1) &&
         powerLevel < (targetPower + _WIFI_PWR_ACCEPT1))
      {
         #ifdef WIFI_AIROHA_PWR_VERBOSE
         printf("'=' ADC=%02x RFIndex=%d '%c' Pwr=%.2f TargetPwr=%.2f \n",
                _wapc.AvgData, _wapc.AirohaIndex, _wapc.Modulation ? 'g':'b',
                SAPower, SATarget);
         #endif
         return WIFI_APC_COMPLETE;
      }

   	if((pwrDiff = fabs(powerLevel - targetPower)) > _WIFI_PWR_RESOLUTION )
   	{
      	if(pwrDiff > 3.0)
      	{
         	pwrDiff = 3.0;
      	}
      	indexOffset = (int) (pwrDiff/_WIFI_PWR_RESOLUTION);
      }
   }
   if(powerLevel > targetPower)
   {
   	#ifdef WIFI_AIROHA_PWR_VERBOSE
      printf("'-' ADC=%02x RFIndex=%d '%c' Pwr=%.2f TargetPwr=%.2f \n",
             _wapc.AvgData, _wapc.AirohaIndex, _wapc.Modulation ? 'g':'b',
             SAPower, SATarget);
      #endif
      _wapc.TrackUpDown |= 0x01;
      _wapc.AirohaIndex -= indexOffset;
      if(_wapc.AirohaIndex  < 0)
      {
         _wapc.AirohaIndex  = 0;
         _wifi_Airoha(AIROHA_PWR_SETTING | ((long)_wapc.AirohaIndex  << 4) );
         return WIFI_APC_DEBOUNCE;
      }
      _wifi_Airoha(AIROHA_PWR_SETTING | ((long)_wapc.AirohaIndex  << 4) );
   }
   else
   {
   	#ifdef WIFI_AIROHA_PWR_VERBOSE
      printf("'+' ADC=%02x RFIndex=%d '%c' Pwr=%.2f TargetPwr=%.2f \n",
             _wapc.AvgData, _wapc.AirohaIndex, _wapc.Modulation ? 'g':'b',
             SAPower, SATarget);
      #endif
      _wapc.TrackUpDown |= 0x02;
      _wapc.AirohaIndex += indexOffset;

      if(_wapc.AirohaIndex > (int)_wcal[0].maxIndex+_WIFI_POWER_DELTA)
      {
         _wapc.AirohaIndex = (int)_wcal[0].maxIndex+_WIFI_POWER_DELTA;
         if(_wapc.AirohaIndex > 63)
         {
         	_wapc.AirohaIndex = 63;
         }
         _wifi_Airoha(AIROHA_PWR_SETTING | ((long)_wapc.AirohaIndex << 4));
         return WIFI_APC_COMPLETE;
      }
      else if(	_wapc.AirohaIndex > 63)
      {
      	_wapc.AirohaIndex = 63;
        	_wifi_Airoha(AIROHA_PWR_SETTING | ((long)_wapc.AirohaIndex << 4));
         return WIFI_APC_COMPLETE;
      }
      _wifi_Airoha(AIROHA_PWR_SETTING | ((long)_wapc.AirohaIndex << 4));
   }
   return WIFI_APC_DEBOUNCE;
}


/*** BeginHeader _wifi_discountAvg  */
int _wifi_discountAvg(int adc_rawdata);
/*** EndHeader */

_wifig_nodebug
int _wifi_discountAvg(int adc_rawdata)
{
   auto int adc_tempavgdata;
   auto int adc_temprawdata;
   auto int adc_tempavgfractiondata;
   auto int adc_avgdata;

   static int adc_k;
   static int adc_avgfractiondata;
   static int adc_alpha;

   #GLOBAL_INIT
   {  adc_avgfractiondata = 0;
      adc_alpha = (int)ceil(_WIFI_DISCOUNT_ALPHA * (float)32768);
      _wapc.AvgHistory = 0;
   }

   adc_avgdata = _wapc.AvgHistory;
#asm _wifig_nodebug
   ; Do conditional check per channel to do the discount averaging
   ; Calculate the new discounted average
   ld    hl,(sp+@sp+adc_rawdata)
   ld    (sp+@sp+adc_temprawdata),hl

   ld    hl,(sp+@sp+adc_avgdata)
   ld    (sp+@sp+adc_tempavgdata),hl

   ld    iy, adc_avgfractiondata
   ld    hl,(iy)
   ld    (sp+@sp+adc_tempavgfractiondata),hl

   ld    iy,adc_alpha
   ld    hl,(iy)
   ld    (adc_k),hl

   ; Calculate new discount average for the current A/D conversion
   ld    hl,(sp+@sp+adc_tempavgdata)   ; Old average
   ld    de,hl
   ld    hl,(sp+@sp+adc_temprawdata)   ; New value
   or    a                       ; Clear carry flag
   sbc   hl,de                   ; New value - Old average
   ex    de,hl                   ; Put result into de
   ld    bc,(adc_k)              ; Get the multiplier
   mul                           ; k * (new value - old average)
   ex    de,hl                   ; Put result in de

   ; The adjustment to the average is now mostly in DE.  Actually, bits
   ; 1-15 are in DE, and bit 0 is in B (top bit).  We must rotate B and DE
   ; left to put the complete adjustment into DE.
.average:
   or    a                 ; Clear carry flag
   rl    c
   rl    b                 ; Rotate 1 bit, to account for signed multiplication
   rl    de                ; Rotate 1 bit, to account for signed multiplication
   ld    hl,(sp+@sp+adc_tempavgfractiondata)
   add   hl,bc
   ld    (sp+@sp+adc_tempavgfractiondata),hl
   ld    hl,(sp+@sp+adc_tempavgdata)   ; Load the old average
   adc   hl,de             ; Add the old average and the new adjustment

   // Write the calculated average to memory for use by AVG function
   ld    (sp+@sp+adc_avgdata),hl
   ld    iy,adc_avgfractiondata
   ld    hl,(sp+@sp+adc_tempavgfractiondata)
   ld    (iy),hl
#endasm
   _wapc.AvgHistory = adc_avgdata;

   return adc_avgdata;

}

/*** BeginHeader _wifi_initPwrCntrl */
void _wifi_initPwrCntrl(int new_cycle);
/*** EndHeader */
_wifig_nodebug
void _wifi_initPwrCntrl(int new_cycle)
{
   #GLOBAL_INIT{
      _wapc.Enable = FALSE;
      _wapc.NewPwrLevel = TRUE;
      _wapc.State = WIFI_APC_START;
      _wapc.AvgHistory=0;
   }
   if(new_cycle)
   {
      _wapc.NewPwrLevel  = TRUE;
   }
   else
   {
      _wapc.NewPwrLevel  = FALSE;
   }
   _wapc.Enable =    TRUE;
   _wapc.Interrupt = FALSE;
   _wapc.TrackUpDown = 0;
   _wapc.State = WIFI_APC_START;
   _wapc.Inactivity = set_timeout(_WIFI_INACTIVITY_PERIOD);
}

/*** BeginHeader _wifi_PwrAdjust */
void _wifi_PwrAdjust(void);
/*** EndHeader */
_wifig_nodebug
void _wifi_PwrAdjust(void)
{
   switch(_wapc.State)
   {
      case WIFI_APC_START:
      	if(_wifi_RFCalCRC())
      	{
         	// Force the RF power back to a Safe Level
         	__wifi_SetPower(_wapc.CustIndex);
         	_wapc.Enable = FALSE;
      		return;
      	}
         _wapc.State = WIFI_APC_ADC_LOOP;
         _wapc.CalTimeout = set_timeout(_WIFI_PWR_CAL_TIMEOUT);
         break;

      case WIFI_APC_ADC_LOOP:
      	_wapc.State = WIFI_APC_ADC_AVG;
         _wapc.AvgData = 0;
         _wapc.AvgCycles = 0;
         _wapc.Interrupt = FALSE;
         _wc_write8(NCTXINTR, _TX_START_ENABLE);
         break;

      case WIFI_APC_ADC_AVG:
      	// Must keep re-enabling TX_Start interrupt for proper operation
         _wc_write8(NCTXINTR, _TX_START_ENABLE);
         if(_wapc.Interrupt || (_wc_read32(0x8) & 0x00100000))
         {
         	_wc_write8(NCTXINTR, _TX_START_DISABLE);
            _wapc.Interrupt = FALSE;
            // Force ADC read when in continuous Transmit mode of operation
         	if(_wc_read32(0x8) & 0x00100000)
            {
             	_wifi_readadc();
            }
            // Pad OFDM ADC value to make equivalent as PSK_CCK data frame
         	if(_wapc.Modulation == _WIFI_OFDM)
            {
               _wapc.Rawdata += (char) (_wcal[1].intercept +
                                ((float)_wapc.AirohaIndex/_wcal[1].slope));
            }
            if(_wapc.NewPwrLevel)
            {
               if(_wapc.AvgCycles == _WIFI_ADC_AVG_COUNT)
               {
                  _wapc.AvgData =_wapc.AvgData/(_WIFI_ADC_AVG_COUNT);
                  if((int)_wapc.Rawdata >= _wapc.AvgData - _WIFI_ADC_ACCEPT_RANGE &&
                     (int)_wapc.Rawdata <= _wapc.AvgData + _WIFI_ADC_ACCEPT_RANGE)
                  {
                     _wapc.State = WIFI_APC_ADJUST_PWR;
                     _wapc.AvgHistory = _wapc.AvgData;
                  }
                  else
                  {
                     _wapc.State = WIFI_APC_ADC_LOOP;
                  }
                  break;
               }
               _wapc.AvgData += (int) _wapc.Rawdata;
               _wapc.AvgCycles++;
            }
            else
            {
              	// ADC discount average with range checking
               _wapc.AvgData = _wifi_discountAvg(_wapc.Rawdata);
               if(_wapc.AvgData >= (_wapc.Rawdata - _WIFI_ADC_ACCEPT_RANGE) &&
                  _wapc.AvgData <= (_wapc.Rawdata + _WIFI_ADC_ACCEPT_RANGE))
               {
               	if(_wapc.AvgCycles == _WIFI_ADC_AVG_COUNT)
                  {
                  	_wapc.State = WIFI_APC_ADJUST_PWR;
                  }
                  _wapc.AvgCycles++;
               }
               else
               {
                  _wapc.State = WIFI_APC_ADC_LOOP;
               }
            }
         }
         if(chk_timeout(_wapc.CalTimeout))
         {
         	_wapc.CalTimeout = set_timeout(_WIFI_PWR_CAL_PERIOD);
         	_wapc.State = WIFI_APC_INTERVAL_TRIGGER;
         }
         break;

      case WIFI_APC_ADJUST_PWR:
      	if(_wifi_RFCalCRC())
      	{
         	_wapc.Enable = FALSE;
      		return;
      	}
         // Note: TX_START interrupt is automatically disabled by the ISR
         _wapc.State = _wifi_setAirohaPwr();
         _wapc.Debounce = _SET_SHORT_TIMEOUT(_WIFI_PWR_CAL_DEBOUNCE);
         break;

      case WIFI_APC_DEBOUNCE:
         if(_CHK_SHORT_TIMEOUT(_wapc.Debounce))
         {
            _wapc.State = WIFI_APC_START;
         }
         break;

      case WIFI_APC_COMPLETE:
         // Setup for next pwr control cycle (seconds)
         _wapc.CalTimeout = set_timeout(_WIFI_PWR_CAL_PERIOD);
         _wapc.State = WIFI_APC_INTERVAL_TRIGGER;
         _wapc.NewPwrLevel  = FALSE;
         _wapc.Inactivity = set_timeout(_WIFI_INACTIVITY_PERIOD);
         break;

      case WIFI_APC_INTERVAL_TRIGGER:
         // Check for timeout to do another pwr control cycle
         if(chk_timeout(_wapc.CalTimeout))
         {
            _wifi_initPwrCntrl(FALSE);
            _wapc.State = WIFI_APC_START;
         }
         #if RCM5600W_SERIES
         if(_wapc.Channel != _wapc.LastChannel)
         {
            _wifi_initPwrCntrl(TRUE);
            _wapc.State = WIFI_APC_START;
            _wapc.LastChannel = _wapc.Channel;
         }
         #endif

         break;

       default:
         _wifi_initPwrCntrl(TRUE);
         _wapc.State = WIFI_APC_START;
         break;
   }
}

/*** BeginHeader _wifi_pwrCntrl */
void _wifi_pwrCntrl (void);
/*** EndHeader */
// Top level Airoha Power Control routine to be called by sendFrame or
// by RF test programs.
_wifig_nodebug
void _wifi_pwrCntrl(void)
{
   // Check if CPU is operating at full speed
	if((RdPortI(GCDR) != 0) && ((RdPortI(GCSR) & 0x1C) == 0x08))
   {
   	_wapc.CpuFullSpeed = TRUE;
   }
   if(_wapc.Enable && _wapc.CpuFullSpeed)
   {
   	// Check CPU speed, if CLK reduced, set power level to a safe limit
      // and disable the APC loop until it's back to full operating speed.
      if((RdPortI(GCDR) == 0) || ((RdPortI(GCSR) & 0x1C) != 0x08))
      {
         __wifi_SetPower(_wapc.CustIndex);
         _wapc.CpuFullSpeed = FALSE;
         return;
      }
      if(chk_timeout(_wapc.Inactivity))
      {
         __wifi_SetPower(_wapc.CustIndex);
         _wifi_initPwrCntrl(TRUE);
      }

      // Check and/or adjust Airoha power
      _wifi_PwrAdjust();
   }
}


/*** BeginHeader _wifi_airohaISR */
void _wifi_airohaISR (void);
/*** EndHeader */
// TX_START interrupt:
// Control register is at address 0x52.  Bit-0 will enable the TX-START
// interrupt (you will need to write this bit to a 1 to enable the interrupt).
// Bit-1 will indicate that a TX-START interrupt occurred.  Bit-2 will be the
// OFDM (1) or PSK/CCK (0) indication.  All 8 interrupt sources are used so
// so this will need to be shared existing one, RX-OVER interrupt. If you get
// an RX-OVER interrupt and Bit-1 is set, it is a TX-START interrupt -
// otherwise it is a receive overrun.  You will need to clear Bit-1 once
// you process the TX-START interrupt.
__nodebug
__xmem void _wifi_airohaISR (void)
{
   auto uint8 txstartStatus;

   #GLOBAL_INIT{
      _sf_spi_busy = FALSE; // Flag for shared SPI port
      _wapc.ForceADCRead = FALSE;
   }
   // Get interrupt status
   if ((_wc_read8(NCISR) & _wc_read8(NCIMR)) & _WIFI_INTR_RXOVERRUN) {

      if((txstartStatus = _wc_read8(NCTXINTR))  & 0x02) {

      	// Verify if TX_ON signal is valid
      	if((txstartStatus & 0x08) == 0) {
         	// Clear TX_Interrupt
         	_wc_write8(NCTXINTR, (_wc_read8(NCTXINTR) & ~0x02));

         	// Clear RxOverRun
         	_wc_write8(NCISR, _WIFI_INTR_RXOVERRUN);
            return;
         }

         if(!_sf_spi_busy)  {

         	// Read PDOUT signal via ADC
            if(_wifi_readadc())
            {
            	if(txstartStatus & 0x04)  {
               	// Set for OFDM
               	_wapc.Modulation = _WIFI_OFDM;
            	}
            	else  {  // Set for PSK/CCK
               	_wapc.Modulation = _WIFI_PSK_CCK;
            	}
            	_wapc.Interrupt = TRUE;

               // Only disable interrupts for normal mode of operation. Manufacturing
         		// code will control interrupt for calibration process.
         		if(!_wapc.ForceADCRead && !_sf_spi_busy)
         		{
            		_wc_write8(NCTXINTR, _TX_START_DISABLE);
         		}
            }
         }
         // Clear TX_Interrupt
         _wc_write8(NCTXINTR, (_wc_read8(NCTXINTR) & ~0x02));

         // Clear RxOverRun
         _wc_write8(NCISR, _WIFI_INTR_RXOVERRUN);
      }
   }
}

/*** BeginHeader _wifi_AirohaCalib */
int _wifi_AirohaCalib(int index, int maxIndex,
                      float Value1, float Level1,
                      float Value2, float Level2,
                      int ch1ADC,int ch6ADC, int ch13ADC);
/*** EndHeader */
_wifig_nodebug
int _wifi_AirohaCalib(int index, int maxIndex,
                      float Value1, float Level1,
                      float Value2, float Level2,
                      int ch1ADC,int ch6ADC, int ch13ADC)
{
   auto float powerLevel1, powerLevel2, powerLevel3;
   auto float slope;
   auto float intercept;
   auto long crc;

   if(Value1 == Value2 || Level1 == Level2)
      return -1;

   slope   = (Value2 - Value1) / (Level2 - Level1);
   intercept =  Level2 - (Value2/slope);

   _wcal[index].slope   = slope;
   _wcal[index].intercept = intercept;
   _wcal[index].maxIndex = (char)maxIndex;

   #if  RCM5600W_SERIES
   if(index == 0)
   {
   	powerLevel1 = _wcal[0].intercept +
                	 ((float)ch1ADC/_wcal[0].slope);

   	powerLevel2 = _wcal[0].intercept +
                	((float)ch6ADC/_wcal[0].slope);

   	powerLevel3 = _wcal[0].intercept +
                	((float)ch13ADC/_wcal[0].slope);
   	_wcal[index].LoOffset = (powerLevel1 - powerLevel2) / 5.0;
   	_wcal[index].HiOffset = (powerLevel3 - powerLevel2) / 5.0;
   }
   else
   {
      _wcal[index].LoOffset = 0;
   	_wcal[index].HiOffset = 0;
   }
   #endif

   crc = crc32_calc (&_wcal[index], sizeof(_wcal[index]) -  sizeof(long), 0);
   _wcal[index].crc = crc;

   return 0;
}

/*** BeginHeader _wifi_RFCalCRC */
int _wifi_RFCalCRC(void);
/*** EndHeader */
//
// Verifies RF calibation data via CRC value.
//
_wifig_nodebug
int _wifi_RFCalCRC(void)
{
   if(_wcal[0].crc ==
       crc32_calc (&_wcal[0], sizeof(_wcal[0]) -  sizeof(long), 0) &&
      _wcal[1].crc ==
       crc32_calc (&_wcal[1], sizeof(_wcal[1]) -  sizeof(long), 0))
   {
      return(0);
   }
   return(-1);
}

/*** BeginHeader _wifi_AirohaCalEERd */
int _wifi_AirohaCalEERd(void);
/*** EndHeader */
//
// Loads RF calibation data into memory for use by Airoha Pwr Control
//
_wifig_nodebug
int _wifi_AirohaCalEERd(void)
{
   auto unsigned long macro;


   _GetSysMacroValue("_DC_CONST_SZ_", &macro);
   if(macro == 0x80)
   {
	#if (_SERIAL_BOOT_FLASH_ == 1)
		//Serial flash boards cannot guarantee that their calibration
		//constants will be in RAM at this point.
		while (sbfRead(_wcal, (IDBlockAddr - macro), sizeof(_wcal)) < 0) ;
	#else
      _f_memcpy(_wcal, (__far void *)(IDBlockAddr - macro), sizeof(_wcal));
	#endif
      return(_wifi_RFCalCRC());
   }
   return(-1);
}


/*** BeginHeader __wifi_SetPower */
void __wifi_SetPower (int value);
/*** EndHeader */
//
// Set Wifi RF power level
//
_wifig_nodebug
void __wifi_SetPower (int value)
{
   if (value >= 0 && value < 16)
   {
      // Disable TX_START Interrupt
      _wc_write8(NCTXINTR, _TX_START_DISABLE);

      _wapc.CustIndex = value;
      if(_wifi_RFCalCRC())
      {
         _wapc.TargetIndex = (int) (_WIFI_MAX_AIROHA_INDEX/15.0 * (float)(value));
         _wapc.Enable = FALSE;
      }
      else
      {
         _wapc.TargetIndex = _wPwr[value];
         _wifi_initPwrCntrl(TRUE);
      }

      _wapc.AirohaIndex = _wapc.TargetIndex;
      time1=SEC_TIMER;

      // Set RF pwr level
      _wifi_Airoha(AIROHA_PWR_SETTING | ((long)_wapc.AirohaIndex << 4));
      #ifdef WIFI_AIROHA_PWR_VERBOSE
      printf("Executed RF power command, index= %x\n", _wapc.AirohaIndex);
      #endif
      #ifdef WIFI_REGION_VERBOSE
      printf("TxPower Index=%d\n",value);
      #endif
   }
}

/*** BeginHeader */
#endif /* __WIFI_AIROHA_PIPER_LIB */
/*** EndHeader */

