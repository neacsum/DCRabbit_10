/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
//
// Embedded 802.11b/g wireless network interface
//

/*** BeginHeader */

#define WPA_CIPHER_NONE 		0x0001
#define WPA_CIPHER_WEP40		0x0002
#define WPA_CIPHER_WEP104		0x0004
#define WPA_CIPHER_TKIP			0x0008
#define WPA_CIPHER_CCMP			0x0010

#define WPA_KEY_MGMT_IEEE8021X			0x0001
#define WPA_KEY_MGMT_PSK					0x0002
#define WPA_KEY_MGMT_NONE					0x0004
#define WPA_KEY_MGMT_IEEE8021X_NO_WPA	0x0008

#define WPA_PROTO_WPA		0x0001
#define WPA_PROTO_RSN		0x0002

#define MAX_SSID_LEN 32
#define PMK_LEN 32


struct wpa_ssid {
	struct wpa_ssid *next; /* next network in global list */
	struct wpa_ssid *pnext; /* next network in per-priority list */
	int id; /* unique id for ctrl_iface */
	int priority;
	uint8 *ssid;
	size_t ssid_len;
	uint8 bssid[ETH_ALEN];
	int bssid_set;
	uint8 psk[PMK_LEN];
	int psk_set;
	char *passphrase;
	/* Bitfields of allowed Pairwise/Group Ciphers, WPA_CIPHER_* */
	int pairwise_cipher;
	int group_cipher;
	int key_mgmt;
	int proto; /* Bitfield of allowed protocols (WPA_PROTO_*) */
	int scan_ssid; /* scan this SSID with Probe Requests */
	uint8 *identity; /* EAP Identity */
	size_t identity_len;
	uint8 *anonymous_identity; /* Anonymous EAP Identity (for unencrypted use
				 * with EAP types that support different
				 * tunnelled identity, e.g., EAP-TTLS) */
	size_t anonymous_identity_len;
	uint8 *password;
	size_t password_len;

#if 0
#ifdef NET_OS
	int use_standard;
	struct wpa_cert *ca_cert;		/* NULL terminated array */
	struct wpa_cert *client_cert;
	struct wpa_cert *private_key;
	struct wpa_cert *ca_cert2;		/* NULL terminated array */
	struct wpa_cert *client_cert2;
	struct wpa_cert *private_key2;
#else
	uint8 *ca_cert;
	uint8 *client_cert;
	uint8 *private_key;
	uint8 *ca_cert2;
	uint8 *client_cert2;
	uint8 *private_key2;
#endif
#endif

	uint8 *private_key_passwd;
	uint8 *private_key2_passwd;
	uint8 *eap_methods; /* zero (EAP_TYPE_NONE) terminated list of allowed
			  * EAP methods or NULL = any */
	char *phase1;
	char *phase2;
	char *pcsc;
	char *pin;

#define EAPOL_FLAG_REQUIRE_KEY_UNICAST			0x0001
#define EAPOL_FLAG_REQUIRE_KEY_BROADCAST		0x0002
	int eapol_flags; /* bit field of IEEE 802.1X/EAPOL options */

#define NUM_WEP_KEYS 4
#define MAX_WEP_KEY_LEN 16
	uint8 wep_key[NUM_WEP_KEYS][MAX_WEP_KEY_LEN];
	size_t wep_key_len[NUM_WEP_KEYS];
	int wep_tx_keyidx;

	/* Per SSID variables that are not read from the configuration file */
	uint8 *otp;
	size_t otp_len;
	int pending_req_identity, pending_req_password;
	uint8 *pending_req_otp;
	size_t pending_req_otp_len;
	int leap, non_leap;
};


struct wpa_config {
	struct wpa_ssid *ssid; /* global network list */
	struct wpa_ssid **pssid; /* per priority network lists (in priority
				  * order) */
	int num_prio; /* number of different priorities */
	int eapol_version;
	int ap_scan;
};

/*** EndHeader */

