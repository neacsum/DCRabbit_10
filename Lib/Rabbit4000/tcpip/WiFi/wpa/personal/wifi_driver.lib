/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
//
// Embedded 802.11b/g wireless network interface
//

/*** BeginHeader */

typedef enum { WPA_ALG_NONE, WPA_ALG_WEP, WPA_ALG_TKIP, WPA_ALG_CCMP } wpa_alg;
typedef enum { CIPHER_NONE, CIPHER_WEP40, CIPHER_TKIP, CIPHER_CCMP,
	       CIPHER_WEP104 } wpa_cipher;
typedef enum { KEY_MGMT_802_1X, KEY_MGMT_PSK, KEY_MGMT_NONE } wpa_key_mgmt;

#define AUTH_ALG_OPEN_SYSTEM	0x01
#define AUTH_ALG_SHARED_KEY	0x02
#define AUTH_ALG_LEAP		0x04

#define SSID_MAX_WPA_IE_LEN 40
struct wpa_scan_result {
	uint8 bssid[ETH_ALEN];
	uint8 ssid[32];
	size_t ssid_len;
	uint8 wpa_ie[SSID_MAX_WPA_IE_LEN];
	size_t wpa_ie_len;
	uint8 rsn_ie[SSID_MAX_WPA_IE_LEN];
	size_t rsn_ie_len;
	int freq; /* MHz */
	int caps; /* e.g. privacy */
	int qual; /* signal quality */
	int noise;
	int level;
	int maxrate;
};

#if 0
struct wpa_driver_ops {
	/**
	 * get_bssid - get the current BSSID
	 * @ifname: interface name, e.g., wlan0
	 * @bssid: buffer for BSSID (ETH_ALEN = 6 bytes)
	 *
	 * Returns: 0 on success, -1 on failure
	 *
	 * Query kernel driver for the current BSSID and copy it to @bssid.
	 * Setting @bssid to 00:00:00:00:00:00 is recommended if the STA is not
	 * associated.
	 */
	int (*get_bssid)(const char *ifname, char *bssid);

	/**
	 * get_ssid - get the current SSID
	 * @ifname: interface name, e.g., wlan0
	 * @ssid: buffer for SSID (at least 32 bytes)
	 *
	 * Returns: length of the SSID on success, -1 on failure
	 *
	 * Query kernel driver for the current SSID and copy it to @ssid.
	 * Returning zero is recommended if the STA is not associated.
	 *
	 * Note: SSID is an array of octets, i.e., it is not nul terminated and
	 * can, at least in theory, contain control characters (including nul)
	 * and as such, should be processed as binary data, not a printable
	 * string.
	 */
	int (*get_ssid)(const char *ifname, char *ssid);

	/**
	 * set_wpa - enable/disable WPA support
	 * @ifname: interface name, e.g., wlan0
	 * @enabled: 1 = enable, 0 = disable
	 *
	 * Returns: 0 on success, -1 on failure
	 *
	 * Configure the kernel driver to enable/disable WPA support. This may
	 * be empty function, if WPA support is always enabled. Common
	 * configuration items are WPA IE (clearing it when WPA support is
	 * disabled), Privacy flag for capability field, roaming mode (need to
	 * allow wpa_supplicant to control roaming).
	 */
	int (*set_wpa)(const char *ifname, int enabled);

	/**
	 * set_key - configure encryption key
	 * @ifname: interface name, e.g., wlan0
	 * @alg: encryption algorithm (%WPA_ALG_NONE, %WPA_ALG_WEP,
	 *	%WPA_ALG_TKIP, %WPA_ALG_CCMP); %WPA_ALG_NONE clears the key.
	 * @addr: address of the peer STA or ff:ff:ff:ff:ff:ff for
	 *	broadcast/default keys
	 * @key_idx: key index (0..3), always 0 for unicast keys
	 * @set_tx: configure this key as the default Tx key (only used when
	 *	driver does not support separate unicast/individual key
	 * @seq: sequence number/packet number, @seq_len octets, the next
	 *	packet number to be used for in replay protection; configured
	 *	for Rx keys (in most cases, this is only used with broadcast
	 *	keys and set to zero for unicast keys)
	 * @seq_len: length of the @seq, depends on the algorithm:
	 *	TKIP: 6 octets, CCMP: 6 octets
	 * @key: key buffer; TKIP: 16-byte temporal key, 8-byte Tx Mic key,
	 *	8-byte Rx Mic Key
	 * @key_len: length of the key buffer in octets (WEP: 5 or 13,
	 *	TKIP: 32, CCMP: 16)
	 *
	 * Returns: 0 on success, -1 on failure
	 *
	 * Configure the given key for the kernel driver. If the driver
	 * supports separate individual keys (4 default keys + 1 individual),
	 * @addr can be used to determine whether the key is default or
	 * individual. If only 4 keys are supported, the default key with key
	 * index 0 is used as the individual key. STA must be configured to use
	 * it as the default Tx key (@set_tx is set) and accept Rx for all the
	 * key indexes. In most cases, WPA uses only key indexes 1 and 2 for
	 * broadcast keys, so key index 0 is available for this kind of
	 * configuration.
	 */
	int (*set_key)(const char *ifname, wpa_alg alg, uint8 *addr,
		       int key_idx, int set_tx, uint8 *seq, size_t seq_len,
		       uint8 *key, size_t key_len);

	/**
	 * events_init - initialize processing of driver events
	 * @ctx: context to be used when calling wpa_supplicant_event()
	 *
	 * Return: pointer to private data, %NULL on failure
	 *
	 * Initialize event processing for kernel driver events (e.g.,
	 * associated, scan results, Michael MIC failure). This function can
	 * allocate a private configuration data area for file descriptor etc.
	 * information. If this is not used, non-NULL value will need to be
	 * returned because %NULL is used to indicate failure.
	 *
	 * The main event loop (eloop.c) of wpa_supplicant can be used to
	 * register callback for read sockets (eloop_register_read_sock()).
	 *
	 * See wpa_supplicant.h for more information about events and
	 * wpa_supplicant_event() function.
	 */
	void * (*events_init)(void *ctx);

	/**
	 * events_deinit - deinitialize processing of driver events
	 * @ctx: context to be used when calling wpa_supplicant_event() (same
	 *	as in matching wpa_driver_events_init() call)
	 * @priv: pointer to private data (from matching
	 *	wpa_driver_events_init())
	 *
	 * Return: 0 on success, -1 on failure
	 *
	 * Stop receiving kernel events. Free private data buffer if one was
	 * allocated in wpa_driver_events_init().
	 */
	int (*events_deinit)(void *ctx, void *priv);

	/**
	 * set_countermeasures - enable/disable TKIP countermeasures
	 * @ifname: interface name, e.g., wlan0
	 * @enabled: 1 = countermeasures enabled, 0 = disabled
	 *
	 * Return: 0 on success, -1 on failure
	 *
	 * Configure TKIP countermeasures. When these are enabled, the driver
	 * should drop all received and queued frames that are using TKIP.
	 */
	int (*set_countermeasures)(const char *ifname, int enabled);

	/**
	 * set_drop_unencrypted - enable/disable unencrypted frame filtering
	 * @ifname: interface name, e.g., wlan0
	 * @enabled: 1 = unencrypted Tx/Rx frames will be dropped, 0 = disabled
	 *
	 * Return: 0 on success, -1 on failure
	 *
	 * Configure the driver to drop all non-EAPOL frames (both receive and
	 * transmit paths). Unencrypted EAPOL frames (ethertype 0x888e) must
	 * still be allowed for key negotiation.
	 */
	int (*set_drop_unencrypted)(const char *ifname, int enabled);

	/**
	 * scan - request the driver to initiate scan
	 * @ifname: interface name, e.g., wlan0
	 * @ctx: context to be used when calling wpa_supplicant_event()
	 * @ssid: specific SSID to scan for (ProbeReq) or %NULL to scan for
	 *	all SSIDs (either active scan with broadcast SSID or passive
	 *	scan
	 * @ssid_len: length of the SSID
	 *
	 * Return: 0 on success, -1 on failure
	 *
	 * Once the scan results are ready, the driver should report scan
	 * results event for wpa_supplicant which will eventually request the
	 * results with wpa_driver_get_scan_results().
	 */
	int (*scan)(const char *ifname, void *ctx, uint8 *ssid, size_t ssid_len);

	/**
	 * get_scan_results - fetch the latest scan results
	 * @ifname: interface name, e.g., wlan0
	 * @results: pointer to buffer for scan results
	 * @max_size: maximum number of entries (buffer size)
	 *
	 * Return: number of scan result entries used on success, -1 on failure
	 *
	 * If scan results include more than @max_size BSSes, @max_size will be
	 * returned and the remaining entries will not be included in the
	 * buffer.
	 */
	int (*get_scan_results)(const char *ifname,
				struct wpa_scan_result *results,
				size_t max_size);

	/**
	 * deauthenticate - request driver to deauthenticate
	 * @ifname: interface name, e.g., wlan0
	 * @addr: peer address (BSSID of the AP)
	 * @reason_code: 16-bit reason code to be sent in the deauthentication
	 *	frame
	 *
	 * Return: 0 on success, -1 on failure
	 */
	int (*deauthenticate)(const char *ifname, uint8 *addr, int reason_code);

	/**
	 * disassociate - request driver to disassociate
	 * @ifname: interface name, e.g., wlan0
	 * @addr: peer address (BSSID of the AP)
	 * @reason_code: 16-bit reason code to be sent in the disassociation
	 *	frame
	 *
	 * Return: 0 on success, -1 on failure
	 */
	int (*disassociate)(const char *ifname, uint8 *addr, int reason_code);

	/**
	 * associate - request driver to associate
	 * @ifname: interface name, e.g., wlan0
	 * @bssid: BSSID of the selected AP
	 * @ssid: the selected SSID
	 * @ssid_len: length of the SSID
	 * @freq: frequency that the selected AP is using (in MHz as reported
	 *	in the scan results)
	 * @wpa_ie: WPA information element to be included in (Re)Association
	 *	Request (including information element id and length). Use of
	 *	this WPA IE is optional. If the driver generates the WPA IE, it
	 *	can use @pairwise_suite, @group_suite, and @key_mgmt_suite
	 *	to select proper algorithms. In this case, the driver has to
	 *	notify wpa_supplicant about the used WPA IE by generating an
	 *	event that the interface code will convert into EVENT_ASSOCINFO
	 *	data (see wpa_supplicant.h). When using WPA2/IEEE 802.11i,
	 *	@wpa_ie is used for RSN IE instead. The driver can determine
	 *	which version is used by looking at the first byte of the IE
	 *	(0xdd for WPA, 0x30 for WPA2/RSN).
	 * @wpa_ie_len: length of the @wpa_ie
	 * @pairwise_suite: the selected pairwise cipher suite (this is usually
	 *	ignored if @wpa_ie is used)
	 * @group_suite: the selected group cipher suite (this is usually
	 *	ignored if @wpa_ie is used)
	 * @key_mgmt_suite: the selected key management suite (this is usually
	 *	ignored if @wpa_ie is used)
	 *
	 * Return: 0 on success, -1 on failure
	 */
	int (*associate)(const char *ifname, const char *bssid,
			 const char *ssid, size_t ssid_len, int freq,
			 const char *wpa_ie, size_t wpa_ie_len,
			 wpa_cipher pairwise_suite, wpa_cipher group_suite,
			 wpa_key_mgmt key_mgmt_suite);

	/**
	 * cleanup - cleanup driver state prior to exit
	 * @ifname: interface name, e.g., wlan0
	 *
	 * Return: nothing
	 */
	void (*cleanup)(const char *ifname);

	/**
	 * set_auth_alg - set IEEE 802.11 authentication algorithm
	 * @ifname: interface name, e.g., wlan0
	 * @auth_alg: bit field of AUTH_ALG_*
	 *
	 * If the driver supports more than one authentication algorithm at the
	 * same time, it should configure all supported algorithms. If not, one
	 * algorithm needs to be selected arbitrarily. Open System
	 * authentication should be ok for most cases and it is recommended to
	 * be used if other options are not supported. Static WEP configuration
	 * may also use Shared Key authentication and LEAP requires its own
	 * algorithm number. For LEAP, user can make sure that only one
	 * algorithm is used at a time by configuring LEAP as the only
	 * supported EAP method.
	 *
	 * Return: 0 on success, -1 on failure
	 */
	int (*set_auth_alg)(const char *ifname, int auth_alg);
};
#endif

/*** EndHeader */

/*** BeginHeader wln_send */
int wln_send (uint8 *data, int length);
/*** EndHeader */
//
// Send a packet to wireless network
// @param data packet containing ethernet header and payload
// @param length total length in bytes
//
_wifig_nodebug
int wln_send (uint8 *data, int length)
{
	ll_Gather g;

	memset(&g, 0, sizeof(g));
	g.iface = IF_WIFI0;
	g.len1 = length;
	g.data1 = data;
	return wifig_sendpacket(_wifig_conf, &g);

#if 0
	// original implementation...
	int ret;

	// Message starts with an ethernet header
	ether_hdr *eth = (ether_hdr *) data;
	length -= sizeof (ether_hdr);

    if (!wln_up)
	{
		DPRINTF ("wln_send: driver not open\n");
		return -1;
	}

	// Send to MAC layer
	ret = MacSendData (eth->dst, eth->eptype, eth->data, length);
	if (ret != ERR_OK)
	{
		DPRINTF ("wln_send: error %d length %d\n", ret, length);
		return -2;
	}

	return 0;
#endif
}


/*** BeginHeader wpa_driver_wln_get_bssid, wpa_driver_wln_get_ssid, wpa_driver_wln_set_key */
int wpa_driver_wln_get_bssid(char *bssid);
int wpa_driver_wln_get_ssid(char *ssid);
int wpa_driver_wln_set_key(wpa_alg alg,
				     unsigned char *addr, int key_idx,
				     int set_tx, uint8 *seq, size_t seq_len,
				     uint8 *key, size_t key_len);
/*** EndHeader */


_wifig_nodebug
__static int wpa_driver_wln_get_bssid(char *bssid)
{

	if (_wifi_macStatus.state >= 	WLN_ST_ASSOC_ESS)
		memcpy (bssid, _wifi_macStatus.bss_addr, WLN_ADDR_SIZE);
	else
		memset (bssid, 0, WLN_ADDR_SIZE);

	return 0;
}

_wifig_nodebug
__static int wpa_driver_wln_get_ssid(char *ssid)
{

	if (_wifi_macStatus.state >= 	WLN_ST_ASSOC_ESS)
	{
		memcpy (ssid, _wifi_macStatus.ssid, _wifi_macStatus.ssid_len);
		return _wifi_macStatus.ssid_len;
	}
	else
		return 0;
}

_wifig_nodebug
__static int wpa_driver_wln_set_key(wpa_alg alg,
				     unsigned char *addr, int key_idx,
				     int set_tx, uint8 *seq, size_t seq_len,
				     uint8 *key, size_t key_len)
{
	WPA_PRINTF((MSG_MSGDUMP, "wpa_driver_wln_set_key: alg=%d key_idx=%d set_tx=%d seq_len=%d key_len=%d",
		alg, key_idx, set_tx, seq_len, key_len))

	return _wifi_wln_set_key ((wln_key_type)alg, addr, key_idx, set_tx, key, key_len, seq);
}

/*** BeginHeader wpa_event_cb, associated */
//SJH - this used to be called via function ptr, but changed to direct call out of wln_send_event.
void wpa_event_cb (wln_event event, void __far *param);
extern BOOL associated;	//FIXME this name
/*** EndHeader */
BOOL associated;

_wifig_nodebug
void wpa_event_cb (wln_event event, void __far *param)
{
	union wpa_event_data data;
	union wpa_event_data __far * pdata;
	#GLOBAL_INIT { associated = 0; }

	pdata = (union wpa_event_data __far *)param;
	switch (event)
	{
		case WLN_EVT_ASSOC:
			// Send scan event in case another application caused association
			associated = TRUE;
			wpa_supplicant_event (&wpa_s, EVENT_SCAN_RESULTS, pdata);

			// Send association event
			wpa_supplicant_event (&wpa_s, EVENT_ASSOC, pdata);

			// Create association info event data
			if (_wifi_macStatus.wpa_info[1] == 0)
			{
				data.assoc_info.req_ies = NULL;
				data.assoc_info.req_ies_len = 0;
			}
			else
			{
				data.assoc_info.req_ies = _wifi_macStatus.wpa_info;
				data.assoc_info.req_ies_len = _wifi_macStatus.wpa_info[1] + 2;
			}

			// Send association info event
			wpa_supplicant_event (&wpa_s, EVENT_ASSOCINFO, &data);
			break;

		case WLN_EVT_DISASSOC:
		case WLN_EVT_MIC_FAIL:
			// Send original event
			wpa_supplicant_event (&wpa_s, (wpa_event_type)event, pdata);
			break;

		case WLN_EVT_JOIN:
			// Driver has selected a BSS.
			// Send scan event to let WPA choose whether to associate.
			associated = FALSE;
			wpa_s.reassociate = TRUE;
			wpa_supplicant_event (&wpa_s, EVENT_SCAN_RESULTS, pdata);
			break;
	}
}

/*** BeginHeader wpa_driver_wln_events_init */
void *wpa_driver_wln_events_init(void *ctx);
/*** EndHeader */
_wifig_nodebug
__static void *wpa_driver_wln_events_init(void *ctx)
{
	associated = FALSE;
#if 0
	wln_set_event_cb (event_cb, ctx);
#endif
	return ctx;
}

/*** BeginHeader wpa_driver_wln_events_deinit */
int wpa_driver_wln_events_deinit(void *ctx, void *priv);
/*** EndHeader */
_wifig_nodebug
__static int wpa_driver_wln_events_deinit(void *ctx, void *priv)
{
#if 0
	wln_remove_event_cb (event_cb);
#endif
	return 0;
}

/*** BeginHeader wpa_driver_wln_get_scan_results */
int wpa_driver_wln_get_scan_results(
				     struct wpa_scan_result *results,
				     size_t max_size);
/*** EndHeader */
_wifig_nodebug
__static int wpa_driver_wln_get_scan_results(
				     struct wpa_scan_result *results,
				     size_t max_size)
{

	memcpy (results->bssid, _wifi_macStatus.bss_addr, WLN_ADDR_SIZE);
	memcpy (results->ssid, _wifi_macStatus.ssid, _wifi_macStatus.ssid_len);
	results->ssid_len = _wifi_macStatus.ssid_len;

	if (_wifi_macStatus.wpa_info[1] == 0)
	{
		results->rsn_ie_len = 0;
		results->wpa_ie_len = 0;
	}
	else if (_wifi_macStatus.wpa_info[0] == RSN_INFO_ELEM)
	{
		memcpy (results->rsn_ie, _wifi_macStatus.wpa_info, _wifi_macStatus.wpa_info[1] + 2);
		results->rsn_ie_len = _wifi_macStatus.wpa_info[1] + 2;
		results->wpa_ie_len = 0;
	}
	else
	{
		memcpy (results->wpa_ie, _wifi_macStatus.wpa_info, _wifi_macStatus.wpa_info[1] + 2);
		results->wpa_ie_len = _wifi_macStatus.wpa_info[1] + 2;
		results->rsn_ie_len = 0;
	}

	if (_wifi_macStatus.channel < 14)
		results->freq = 2407 + 5*_wifi_macStatus.channel;
	else if (_wifi_macStatus.channel == 14)
		results->freq = 2484;
	else
		results->freq = 5180 + 20*(_wifi_macStatus.channel-15);

	results->caps = _wifi_macStatus.bss_caps;
	results->qual = 0;
	results->noise = 0;
	results->level = _wifi_macStatus.rx_signal;
	results->maxrate = _wifi_macStatus.tx_rate;

	return 1;
}

/*** BeginHeader wpa_driver_wln_disassociate */
int wpa_driver_wln_disassociate(uint8 *addr,
					  int reason_code);
/*** EndHeader */
_wifig_nodebug
__static int wpa_driver_wln_disassociate(uint8 *addr,
					  int reason_code)
{
	WPA_PRINTF((MSG_DEBUG, "wpa_driver_wln_disassociate"))
	return _wifi_wln_disassociate (addr, reason_code);
}

/*** BeginHeader wpa_driver_wln_associate */
int wpa_driver_wln_associate(const char *bssid,
				       const char *ssid, size_t ssid_len,
				       int freq,
				       const char *wpa_ie, size_t wpa_ie_len,
				       wpa_cipher pairwise_suite,
				       wpa_cipher group_suite,
				       wpa_key_mgmt key_mgmt_suite);
/*** EndHeader */
_wifig_nodebug
__static int wpa_driver_wln_associate(const char *bssid,
				       const char *ssid, size_t ssid_len,
				       int freq,
				       const char *wpa_ie, size_t wpa_ie_len,
				       wpa_cipher pairwise_suite,
				       wpa_cipher group_suite,
				       wpa_key_mgmt key_mgmt_suite)
{
	int channel;

	// If already associated, ignore 2nd associate
	if (associated)
		return 1;

	WPA_PRINTF((MSG_DEBUG, "wpa_driver_wln_associate"))

	if (freq < 2484)
		channel = (freq-2407)/5;
	else if (freq == 2484)
		channel = 14;
	else
		channel = (freq-5180)/20 + 15;

	if (wpa_ie_len == 0)
		wpa_ie = NULL;

	return _wifi_wln_associate ((uint8 *) ssid, ssid_len, channel, (uint8 *) bssid, (uint8 *) wpa_ie);
}


#if 0
struct wpa_driver_ops wpa_driver_wln_ops = {
    wpa_driver_wln_get_bssid, /* .get_bssid  */
    wpa_driver_wln_get_ssid, /* .get_ssid  */
    (int (*)(const char *, int)) no_op, /*.set_wpa */
    wpa_driver_wln_set_key, /* .set_key */
    wpa_driver_wln_events_init, /* .events_init */
    wpa_driver_wln_events_deinit, /* .events_deinit */
    (int (*)(const char *, int)) no_op, /* .set_countermeasures */
    (int (*)(const char *, int)) no_op, /* .set_drop_unencrypted */
    (int (*)(const char *, void *, uint8 *, int)) no_op, /* .scan */
    wpa_driver_wln_get_scan_results, /* .get_scan_results */
    wpa_driver_wln_disassociate, /* .deauthenticate */
    wpa_driver_wln_disassociate, /* .disassociate */
    wpa_driver_wln_associate, /* .associate */
    (void (*)(const char *)) no_op, /* .cleanup */
    (int (*)(const char *, int)) no_op /* .set_auth_alg */
};
#endif