//
// Embedded 802.11b/g wireless network interface
//

/*** BeginHeader pbkdf2_sha1,
		wpa_passphrase_to_psk_init, wpa_passphrase_to_psk_run */
#ifndef _WIFI_SHA1_Incl
#define _WIFI_SHA1_Incl

#use "sha1.lib"

// global defines
#ifdef WIFI_SHA1_DEBUG
	#define _wifi_sha1_nodebug __debug
#else
	#define _wifi_sha1_nodebug __nodebug
#endif


// Make compatible with Rabbit library
#define SHA1_CTX		sha_state
#define SHA1Init		sha_init
#define SHA1Update	sha_add
#define SHA1Final(a,b)	sha_finish(b,a)


typedef struct {
	char *passphrase;
	char *ssid;
	size_t ssid_len;
	char *buf;

	word	state;

	word iterations;
	size_t buflen;
	long count;
	char *pos;
	size_t left, plen;
	char digest[SHA_HASH_SIZE];

	char tmp[SHA_HASH_SIZE], tmp2[SHA_HASH_SIZE];
	word i;
	char count_buf[4];
	size_t passphrase_len;
	char __far *addr[2];
	word len[2];
} wpa_passphrase_to_psk_state;


void pbkdf2_sha1(char *passphrase, char *ssid, size_t ssid_len, int iterations,
		 unsigned char *buf, size_t buflen);
void wpa_passphrase_to_psk_init(wpa_passphrase_to_psk_state * pps,
			char *passphrase, char *ssid, size_t ssid_len, unsigned char *buf);
int wpa_passphrase_to_psk_run(wpa_passphrase_to_psk_state * pps,
			word further_iterations);

/*** EndHeader */



/*
 * SHA1 hash implementation and interface functions
 * Copyright (c) 2003-2004, Jouni Malinen <jkmaline@cc.hut.fi>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * Alternatively, this software may be distributed under the terms of BSD
 * license.
 *
 * See README and COPYING for more details.
 */





/* START FUNCTION DESCRIPTION ********************************************
wpa_passphrase_to_psk_init                      <WIFI_SHA1.LIB>

SYNTAX:	void wpa_passphrase_to_psk_init(wpa_passphrase_to_psk_state * pps,
					char *passphrase, char *ssid, size_t ssid_len,
					unsigned char *buf)

DESCRIPTION: 	Initialize state for computation of hex key from passphrase.

					See samples\wifi\passphrase.c for example of use.

PARAMETER1:		state structure to initialize, managed by library
PARAMETER2: 	passphrase to convert (null terminated string)
PARAMETER3: 	target SSID
PARAMETER4:		length of SSID string (since allowed to contain nulls)
PARAMETER4:		where to place result: buffer of 32 bytes.

SEE ALSO:	wpa_passphrase_to_psk_run

END DESCRIPTION **********************************************************/


_wifi_sha1_nodebug
void wpa_passphrase_to_psk_init(wpa_passphrase_to_psk_state * pps,
			char *passphrase, char *ssid, size_t ssid_len, unsigned char *buf)
{
	pps->passphrase = passphrase;
	pps->ssid = ssid;
	pps->ssid_len = ssid_len;
	pps->buf = buf;

	pps->iterations = 4096;
	pps->buflen = 32;

	pps->pos = buf;
	pps->count = 0;
	pps->left = pps->buflen;
	pps->passphrase_len = strlen(passphrase);

	pps->state = 0;

}

/* START FUNCTION DESCRIPTION ********************************************
wpa_passphrase_to_psk_run                      <WIFI_SHA1.LIB>

SYNTAX:	int wpa_passphrase_to_psk_run(wpa_passphrase_to_psk_state * pps,
				word further_iterations)

DESCRIPTION: 	Take next step in computation of hex key from passphrase.

					See samples\wifi\passphrase.c for example of use.

PARAMETER1:		state structure, as passed to wpa_passphrase_to_psk_init()
PARAMETER2: 	Number of iterations to perform (1..4096).  The total number
               of iterations required will be 4096.  This parameter allows
               control of how many CPU cycles are consumed by the
               conversion process at each step.

RETURN VALUE:  0: conversion complete, result is in buffer originally
                  provided to wpa_passphrase_to_psk_init().
               non-zero: not complete, call again.

SEE ALSO:	wpa_passphrase_to_psk_init

END DESCRIPTION **********************************************************/

_wifi_sha1_nodebug
int wpa_passphrase_to_psk_run(wpa_passphrase_to_psk_state * pps,
			word further_iterations)
{
	auto word j;

	if (further_iterations < 1)
		further_iterations = 1;

	switch (pps->state) {
	case 0:	// init
	pps->state = 1;

	while (pps->left > 0) {
		++pps->count;
		//---
		//pbkdf2_sha1_f(passphrase, ssid, ssid_len, iterations, count,
		//	      digest);
	   //passphrase_len = strlen(passphrase);

	   pps->addr[0] = pps->ssid;
	   pps->addr[1] = pps->count_buf;
	   pps->len[0] = pps->ssid_len;
	   pps->len[1] = 4;

	   /* F(P, S, c, i) = U1 xor U2 xor ... Uc
	    * U1 = PRF(P, S || i)
	    * U2 = PRF(P, U1)
	    * Uc = PRF(P, Uc-1)
	    */
	   *(long *)(pps->count_buf) = intel(pps->count);
	   hmac_sha1_vector(pps->passphrase, pps->passphrase_len, 2, pps->addr, pps->len, pps->tmp);
	   memcpy(pps->digest, pps->tmp, SHA_HASH_SIZE);

	   for (pps->i = 1; pps->i < pps->iterations; ++pps->i) {
	case 1:
			if (!further_iterations--)
				return 1;	// call back again
	      hmac_sha1(pps->passphrase, pps->passphrase_len, pps->tmp, SHA_HASH_SIZE,
	           pps->tmp2);
	      memcpy(pps->tmp, pps->tmp2, SHA_HASH_SIZE);
	      for (j = 0; j < SHA_HASH_SIZE; ++j)
	         pps->digest[j] ^= pps->tmp2[j];
	   }
		//---
		pps->plen = pps->left > SHA_HASH_SIZE ? SHA_HASH_SIZE : pps->left;
		memcpy(pps->pos, pps->digest, pps->plen);
		pps->pos += pps->plen;
		pps->left -= pps->plen;
	}

	}

	return 0;	// All done
}


_wifi_sha1_nodebug
void pbkdf2_sha1(char *passphrase, char *ssid, size_t ssid_len, int iterations,
		 unsigned char *buf, size_t buflen)
{
	// Wrapper routine to do it all in one fell swoop.
	auto wpa_passphrase_to_psk_state pps;
	wpa_passphrase_to_psk_init(&pps, passphrase, ssid, ssid_len, buf);
	// Override defaults
	pps.iterations = iterations;
	pps.buflen = pps.left = buflen;
	while (wpa_passphrase_to_psk_run(&pps, 256));
}


/*** BeginHeader */
#endif
/*** EndHeader */


