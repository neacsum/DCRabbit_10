/*
   Copyright (c) 2015 Digi International Inc.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
//
// Embedded 802.11b wireless network interface
// MAC layer CCMP (AES) encryption functions
//

/*** BeginHeader */


#ifdef WIFI_AES_DEBUG
	#define _wifi_ccmp_debug __debug
#else
	#define _wifi_ccmp_debug __nodebug
#endif


#define _WIFI_AES_ENCRYPT	1
#define _WIFI_AES_DECRYPT	0

// AES_CONTROL_REGISTER
#define _WIFI_AES_MODE_BIT         0x10
#define _WIFI_AES_KEY_LOAD_BIT     0x04

/* Because array size can't be a const in C, the following two are macros.
   Both sizes are in bytes. */
#define 	_WIFI_AES_MAXNR 10
#define 	_WIFI_AES_BLOCK_SIZE 16
#define	_WIFI_AES_BITS	128			// 128 bit keys, 10 rounds

#ifndef  _WIFI_AES_TIMEOUT
#define 	_WIFI_AES_TIMEOUT 50
#endif

// AES block
typedef uint8 _wifi_AES_Block[_WIFI_AES_BLOCK_SIZE];

/* This should be a hidden type, but EVP requires that the size be known */
typedef struct {
    unsigned long rd_key[4 *(_WIFI_AES_MAXNR + 1)];
}_WIFI_AES_KEY;


// CCMP key data
typedef struct {
	BOOL valid;				// TRUE if key is valid
	uint16 	txPN0;		// Transmit packet number (low 16 bits)
	uint32 	txPN1;		// Transmit packet number (high 32 bits)
	uint16 	rxPN0;		// largest received packet number
	uint32 	rxPN1;
	uint16 	pn_seen_mask;		// bitmask of keys seen before current rxPN
	_WIFI_AES_KEY	rk;			// AES key schedule
} _wifi_CcmpKey;

__far _wifi_CcmpKey aes_keys[WLN_KEY_NUM];

int aes_txKeyID;			// Key index used to transmit



// CCMP encryption data
typedef struct {
	_WIFI_AES_KEY __far *key;
	uint8		init[_WIFI_AES_BLOCK_SIZE];
	uint8		header[2*_WIFI_AES_BLOCK_SIZE];
} _wifi_WiFiCcmpData;

#ifndef __AES_CORE_LIB
	#use "aes_core.lib"
#endif


/*** EndHeader */


/*** BeginHeader  _wifi_SetAESKey */
void _wifi_SetAESKey(int id, _WIFI_AES_KEY __far *key);
/*** EndHeader */

// Load a key to the WiWave
_wifi_ccmp_debug
void _wifi_SetAESKey(int id, _WIFI_AES_KEY __far *key)
{
    // Set AES register for loading key
    _wc_write8(NCAMR, _WIFI_AES_MODE_BIT | _WIFI_AES_KEY_LOAD_BIT | id);
    _wc_HWWriteAES(key, sizeof(_WIFI_AES_KEY));
}


/*** BeginHeader _wifi_CcmpSetKey */
BOOL _wifi_CcmpSetKey (int id, BOOL tx, uint8 *data, int len, uint8 *seq);
/*** EndHeader */

//
// Set or delete a CCMP key
//
_wifi_ccmp_debug
BOOL _wifi_CcmpSetKey (int id, BOOL tx, uint8 *data, int len, uint8 *seq)
{
	_wifi_CcmpKey __far *key;

	if (id < 0 || id >= WLN_KEY_NUM)
		return FALSE;

	key = aes_keys + id;

	if (len == _WIFI_CCMP_KEY_SIZE)
	{
		_f_memset (key, 0, sizeof (_wifi_CcmpKey));
		key->valid = TRUE;
		if (tx)
			aes_txKeyID = id;

		// Set sequence counter if given
		if (seq)
		{
         key->rxPN0 = _WIFI_GET16 (seq);
			key->rxPN1 = _WIFI_GET32 (seq+2);
		}

		// Store only AES key schedule for this key
      AESexpandKey4((unsigned char __far *)&key->rk, data);

#ifndef _WIFI_OLD_AES
		// Encrypt if not using hardware AES
		if (_wifi_hwAES)
		{
			// Set key in hardware, AES mode 1
      	_wifi_SetAESKey(id, &key->rk);
		}
#endif
	}
	else if (len == 0)
		key->valid = FALSE;
	else
		return FALSE;

	return TRUE;
}

/*** BeginHeader _wifi_CcmpGetData */
BOOL _wifi_CcmpGetData (__far WiFiMacBuffer *buf, _wifi_WiFiCcmpData *data);
/*** EndHeader */

//
// Get AES encryption data for a frame.
// Called from hardware interrupt handler if using AES acceleration.
//
_wifi_ccmp_debug
BOOL _wifi_CcmpGetData (__far WiFiMacBuffer *buf, _wifi_WiFiCcmpData *data)
{
	int dlen;
	_wifi_CcmpKey __far *key;
	__far uint8 *bp;
	WiFiSeqControlU squ;

   dlen = buf->length - _WIFI_DATA_SIZE - _WIFI_CCMP_SIZE;
	// Not encrypted
	if (dlen < 0 ||
       !buf->macHdr.fc.flags 	||
       !(buf->body[3] & _WIFI_EXT_IV) ||
       !(_wifi_macParams.encrypt & WLN_ENCR_CCMP))
		return FALSE;

	// Key not set
	key = &aes_keys[buf->body[3] >> 6];
	if (!key->valid)
		return FALSE;

	// Get key schedule
	data->key = &key->rk;

	// Set up CCM initial block for MIC IV
	data->init[0] = 0x59;
	data->init[1] = 0;
	_f_memcpy (data->init+2, buf->macHdr.addr2, WLN_ADDR_SIZE);

	data->init[8]  = buf->body[7];
	data->init[9]  = buf->body[6];
	data->init[10] = buf->body[5];
	data->init[11] = buf->body[4];
	data->init[12] = buf->body[1];
	data->init[13] = buf->body[0];
	data->init[14] = dlen >> 8;
	data->init[15] = dlen;


	// Set up MIC header blocks
	bp = (__far uint8 *) &buf->macHdr;

	squ.sq16 = _WIFI_NTOH16 (buf->macHdr.squ.sq16);

	data->header[0] = 0;
	data->header[1] = 22;


	data->header[2] = bp[0] & 0xcf;
	data->header[3] = bp[1] & 0xd7;


	_f_memcpy (data->header+4, buf->macHdr.addr1, 3*WLN_ADDR_SIZE);
	data->header[22] = squ.sq.info & 0x0f;
	data->header[23] = 0;
	memset (data->header+24, 0, 8);

	return TRUE;
}

/*** BeginHeader _wifi_xor_block */
void _wifi_xor_block (__far uint8 *dst, __far uint8 *src, int len);
/*** EndHeader */

// XOR src into dst for length len
_wifi_ccmp_debug
void _wifi_xor_block (__far uint8 *dst, __far uint8 *src, int len)
{
	while (--len >= 0)
		*dst++ ^= *src++;
}

/*** BeginHeader _wifi_InitBlocks */
BOOL _wifi_InitBlocks (__far WiFiMacBuffer *buf, _wifi_AES_Block init, _wifi_AES_Block mic);
/*** EndHeader */
//
// Initialize MIC and counter blocks for a frame
//
_wifi_ccmp_debug
BOOL _wifi_InitBlocks (__far WiFiMacBuffer *buf, _wifi_AES_Block init, _wifi_AES_Block mic)
{
	_wifi_WiFiCcmpData data;

	if (!_wifi_CcmpGetData (buf, &data))
		return FALSE;

	// Calculate MIC over initial and header blocks
   AESencrypt4x4((char __far *)data.key, data.init, mic);
	xor16(mic, data.header);
   AESencrypt4x4((char __far *)data.key, mic, mic);
	xor16 (mic, data.header+_WIFI_AES_BLOCK_SIZE);
   AESencrypt4x4((char __far *)data.key, mic, mic);

	// Set up CCM CTR-mode counter
	memcpy (init, data.init, _WIFI_AES_BLOCK_SIZE);
	init[0]  = 0x01;
	init[14] = 0;
	init[15] = 0;

	return TRUE;
}

/*** BeginHeader _wifi_CcmpEncrypt */
BOOL _wifi_CcmpEncrypt (__far WiFiMacBuffer *buf);
/*** EndHeader */
//
// Encrypt a frame with CCMP
//
_wifi_ccmp_debug
BOOL _wifi_CcmpEncrypt (__far WiFiMacBuffer *buf)
{
	_wifi_CcmpKey __far *key;
	_wifi_AES_Block blk, ctr, mic, pkt;
	__far uint8 *dp;
	int dlen;
	int blen;


   dp = buf->body + _WIFI_EXT_IV_SIZE;
   dlen = buf->length - _WIFI_DATA_SIZE;

	// Use transmit key
	key = &aes_keys[aes_txKeyID];
	if (!key->valid)
		return FALSE;

	// Increment packet number
	key->txPN0++;
	if (key->txPN0 == 0)
		key->txPN1++;

	// Store in IV .....
   buf->macHdr.fc.flags |= _WIFI_FCNTRL_PROTECT;

	_WIFI_SET16_FAR (buf->body, key->txPN0);
	buf->body[2] = 0;
	buf->body[3] = (aes_txKeyID << 6) | _WIFI_EXT_IV;
	_WIFI_SET32_FAR (buf->body+4, key->txPN1);

	DPRINTF("CCMP TX key %u PN:0x%08lX 0x%04X\n", aes_txKeyID, key->txPN1, key->txPN0);
	
	// Adjust buffer length
	buf->length += _WIFI_CCMP_SIZE;

	// Encrypt if not using hardware AES
	if (!_wifi_hwAES)
	{
		if (!_wifi_InitBlocks (buf, ctr, mic))
			return FALSE;

		blen = _WIFI_AES_BLOCK_SIZE;
		while (dlen > 0)
		{
			if (dlen < _WIFI_AES_BLOCK_SIZE)
				blen = dlen;

			// Update MIC
			xor_n(mic, dp, blen);
         AESencrypt4x4((char __far *)&key->rk, mic, mic);

			// Encrypt with counter
			ctr[15]++;
         AESencrypt4x4((char __far *)&key->rk, ctr, blk);
			xor_n(dp, blk, blen);

			dp += blen;
			dlen -= blen;
		}

		// Encrypt MIC with counter = 0
		ctr[15] = 0;
      AESencrypt4x4((char __far *)&key->rk, ctr, blk);
		xor8(mic, blk /*, _WIFI_MIC_SIZE*/);
		_f_memcpy (dp, mic, _WIFI_MIC_SIZE);
	}

	return TRUE;
}

/*** BeginHeader _wifi_Ccmp_PnCheck */
#define CCMP_PN_TOO_OLD -100
#define CCMP_PN_REPLAY  -101
int _wifi_Ccmp_PnCheck(_wifi_CcmpKey __far *key,
                       uint32 pn1, uint16 pn0, int update);
#define _wifi_Ccmp_PnInvalid(key, pn1, pn0) \
	_wifi_Ccmp_PnCheck(key, pn1, pn0, FALSE)
#define _wifi_Ccmp_PnUpdate(key, pn1, pn0) \
	_wifi_Ccmp_PnCheck(key, pn1, pn0, TRUE)
/*** EndHeader */
/*
	Validate packet number (PN) for the given key.  The key stores the
	largest-seen PN and a bitmask of the 16 prior PNs to allow for receiving
	packets slightly out of order (but not allowing duplicate packets).
	
	Set <update> to non-zero to update key with new packet number if valid.
	
	Returns negative value if the stack shouldn't accept the packet (possible
	replay attack) or 0 if PN hasn't been seen before.
*/
_wifi_ccmp_debug
int _wifi_Ccmp_PnCheck(_wifi_CcmpKey __far *key,
                       uint32 pn1, uint16 pn0, int update)
{
	uint32 delta1;	// upper 32 bits of new PN - largest-seen PN
	uint16 delta0;
	uint16 bitmask; 
	
	delta1 = pn1 - key->rxPN1;
	delta0 = pn0 - key->rxPN0;
	if (delta0 > pn0) {
		// overflow calculating pn0 difference, borrow from pn1 calculation
		--delta1;
	}
	
	if (delta0 == 0 && delta1 == 0) {
		// PN matches last PN seen
		return CCMP_PN_REPLAY;
	}
	
	if (delta1 > pn1) {
		// overflow calculating pn0 difference, result is negative and PN is older
		if (delta1 != (uint32) -1 || delta0 < (uint16) -16) {
			return CCMP_PN_TOO_OLD;
		}
		bitmask = 1U << (0xFFFF - delta0);
		if (key->pn_seen_mask & bitmask) {
			return CCMP_PN_REPLAY;
		}
		if (update) {
			key->pn_seen_mask |= bitmask;
		}
		
		DPRINTF("%s PN 0x%08LX %04X %s\n",
			"Prior", pn1, pn0, update ? "seen" : "OK");
		return 0;         // PN is earlier than largest-seen, but still new to us
	}


	if (update) {
		if (delta1 == 0 && delta0 < 16) {
			// update bitmask of seen PNs
			key->pn_seen_mask <<= delta0;
			// set bit corresponding to previous largest-seen PN value
			key->pn_seen_mask |= 1U << (delta0 - 1);
		} else {
			// shifting bitmask >= 16 positions results in 0
			key->pn_seen_mask = 0;
		}
		key->rxPN1 = pn1;
		key->rxPN0 = pn0;
	}
	
	DPRINTF("%s PN 0x%08LX %04X %s\n",
		"  New", pn1, pn0, update ? "seen" : "OK");
	return 0;            // PN larger than previous largest and therefore valid
}

/*** BeginHeader _wifi_Ccmp_PnCheck_test */
void _wifi_Ccmp_PnCheck_test(void);
/*** EndHeader */
/*
	Test code to validate proper operation of _wifi_Ccmp_PnCheck() using asserts.
*/
#define _WIFI_CCMP_SETUP_KEY(pn1, pn0) \
	{ memset(&k, 0, sizeof k); k.rxPN1 = pn1; k.rxPN0 = pn0; }
void _wifi_Ccmp_PnCheck_test(void)
{
	_wifi_CcmpKey k;
	uint32 i;
	
	_WIFI_CCMP_SETUP_KEY(0, 0);
	
	// all keys other than 0 are valid when largest-seen key is 0
	assert(_wifi_Ccmp_PnCheck(&k, 0, 0, FALSE) == CCMP_PN_REPLAY);
	assert(_wifi_Ccmp_PnCheck(&k, 0, 1, FALSE) == 0);
	assert(_wifi_Ccmp_PnCheck(&k, 0xFFFFFFFF, 0, FALSE) == 0);
	assert(_wifi_Ccmp_PnCheck(&k, 1000, 10000, FALSE) == 0);
	assert(_wifi_Ccmp_PnCheck(&k, 0xFFFFFFFF, 0, FALSE) == 0);
	assert(_wifi_Ccmp_PnCheck(&k, 0xFFFFFFFF, 0xFFFF, FALSE) == 0);
	
	_WIFI_CCMP_SETUP_KEY(0xF0F0F0F0, 0x3);
	assert(_wifi_Ccmp_PnCheck(&k, 0, 0, FALSE) == CCMP_PN_TOO_OLD);
	assert(_wifi_Ccmp_PnCheck(&k, 0xF0F0F0F0, 0x3, FALSE) == CCMP_PN_REPLAY);
	assert(_wifi_Ccmp_PnCheck(&k, 0xFFFFFFFF, 0, FALSE) == 0);
	assert(_wifi_Ccmp_PnCheck(&k, 0xFFFFFFFF, 0xFFFF, FALSE) == 0);
	
	// keys in recent past are OK:
	assert(_wifi_Ccmp_PnCheck(&k, 0xF0F0F0EF, 0xFFFF, FALSE) == 0);
	assert(_wifi_Ccmp_PnCheck(&k, 0xF0F0F0EF, 0xFFF3, FALSE) == 0);
	
	// but go too far back and they aren't
	assert(_wifi_Ccmp_PnCheck(&k, 0xF0F0F0EF, 0xFFF2, FALSE) == CCMP_PN_TOO_OLD);
	

	for (i = 1; i; i <<= 1) {
		_WIFI_CCMP_SETUP_KEY(i, 0);
		
		// load a few packet numbers
		assert(_wifi_Ccmp_PnCheck(&k, i, 1, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i, 1, TRUE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i, 2, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i, 3, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i, 5, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i, 8, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i, 13, TRUE) == 0);
		
		// should still be able to detect replay of recent packets
		assert(_wifi_Ccmp_PnCheck(&k, i, 1, TRUE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i, 2, TRUE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i, 3, TRUE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i, 5, TRUE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i, 8, TRUE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i, 12, FALSE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i, 13, TRUE) == CCMP_PN_REPLAY);
		
		// This should shift bitmask even further, but still allow for detection
		assert(_wifi_Ccmp_PnCheck(&k, i, 21, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i, 1, TRUE) == CCMP_PN_TOO_OLD);
		assert(_wifi_Ccmp_PnCheck(&k, i, 2, TRUE) == CCMP_PN_TOO_OLD);
		assert(_wifi_Ccmp_PnCheck(&k, i, 3, TRUE) == CCMP_PN_TOO_OLD);
		assert(_wifi_Ccmp_PnCheck(&k, i, 4, TRUE) == CCMP_PN_TOO_OLD); // -17 boundary
		assert(_wifi_Ccmp_PnCheck(&k, i, 5, TRUE) == CCMP_PN_REPLAY);  // -16 boundary
		assert(_wifi_Ccmp_PnCheck(&k, i, 8, TRUE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i, 13, TRUE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i, 21, TRUE) == CCMP_PN_REPLAY);
		
		// do some back-fill and re-check for replay
		assert(_wifi_Ccmp_PnCheck(&k, i, 7, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i, 9, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i, 11, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i, 15, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i, 17, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i, 20, TRUE) == 0);
		
		assert(_wifi_Ccmp_PnCheck(&k, i, 7, TRUE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i, 9, TRUE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i, 11, TRUE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i, 15, TRUE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i, 17, TRUE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i, 20, TRUE) == CCMP_PN_REPLAY);
		
		// roll-over test
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x000B, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i,   0xFFFE, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i,   0xFFFF, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i,   0xFFFA, TRUE) == CCMP_PN_TOO_OLD);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x0003, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x0005, TRUE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x000E, TRUE) == 0);
		
		assert(_wifi_Ccmp_PnCheck(&k, i,   0xFFFE, FALSE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i,   0xFFFF, FALSE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x0000, FALSE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x0001, FALSE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x0002, FALSE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x0003, FALSE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x0004, FALSE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x0005, FALSE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x0006, FALSE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x0007, FALSE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x0008, FALSE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x0009, FALSE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x000A, FALSE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x000B, FALSE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x000C, FALSE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x000D, FALSE) == 0);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x000E, FALSE) == CCMP_PN_REPLAY);
		assert(_wifi_Ccmp_PnCheck(&k, i+1, 0x000F, FALSE) == 0);
	}
}

/*** BeginHeader _wifi_CcmpDecrypt */
BOOL _wifi_CcmpDecrypt (__far WiFiMacBuffer *buf);
/*** EndHeader */
//
// Decrypt a frame with CCMP
//
_wifi_ccmp_debug
BOOL _wifi_CcmpDecrypt (__far WiFiMacBuffer *buf)
{
	_wifi_CcmpKey __far *key;
	_wifi_AES_Block blk, ctr, mic, pkt;
	__far uint8 *dp;
	int dlen;
	uint16 pn0;
	uint32 pn1;
	int blen;

   dp = buf->body + _WIFI_EXT_IV_SIZE;
   dlen = buf->length - _WIFI_DATA_SIZE - _WIFI_CCMP_SIZE;

	// Not encrypted
	if (dlen < 0 || !buf->macHdr.fc.flags || !(buf->body[3] & _WIFI_EXT_IV))
		return FALSE;

	// Key not set
	key = &aes_keys[buf->body[3] >> 6];
	if (!key->valid)
		return FALSE;

	// Get packet number from IV and check for replay.
	// Counters are 48 bits: 16 LSB in pn0, 32 LSB in pn1.
	pn0 = _WIFI_GET16_FAR (buf->body);
	pn1 = _WIFI_GET32_FAR (buf->body+4);

	// New PN must be larger than largest previously seen, or in the prior 16
	// PN values and not yet seen.
	if (_wifi_Ccmp_PnInvalid(key, pn1, pn0))
	{
		DPRINTF ("CCMP replay detected\n");
		return FALSE;
	}

	// Decrypt if not using hardware AES
	if (!_wifi_hwAES)
	{
		if (!_wifi_InitBlocks (buf, ctr, mic))
			return FALSE;

      memset(pkt, 0, 16);
      _f_memcpy (pkt, dp, 8);
		blen = _WIFI_AES_BLOCK_SIZE;
		while (dlen > 0)
		{
			if (dlen < _WIFI_AES_BLOCK_SIZE)
				blen = dlen;

			// Decrypt with counter
			ctr[15]++;
         AESencrypt4x4((char __far *) &key->rk, ctr, blk);
			xor_n(dp, blk, blen);

			// Update MIC
			xor_n(mic, dp, blen);
         AESencrypt4x4((char __far *) &key->rk, mic, mic);
			dp += blen;
			dlen -= blen;
		}

		// Decrypt MIC with counter = 0
		ctr[15] = 0;
      AESencrypt4x4((char __far *) &key->rk, ctr, blk);
		xor8(dp, blk /*, _WIFI_MIC_SIZE*/);

		// Compare calculated MIC with actual MIC
		if (memcmp (mic, dp, _WIFI_MIC_SIZE) != 0)
		{
			_wifi_macStats.rxDropMICFail++;
			return FALSE;
		}
	}

	// Mark packet number as seen if successful.
	_wifi_Ccmp_PnUpdate(key, pn1, pn0);
	
	// Adjust buffer length
	buf->length -= _WIFI_CCMP_SIZE;

	return TRUE;
}

/*** BeginHeader  _wifi_ccmpCipher */
extern const WiFiMacCipher _wifi_ccmpCipher;
/*** EndHeader */


// CCMP cipher operations table
const WiFiMacCipher _wifi_ccmpCipher = {
	_WIFI_EXT_IV_SIZE,
	0,
	_WIFI_DATA_SIZE + 16,
	0,
	_wifi_CcmpSetKey,
	_wifi_CcmpEncrypt,
	_wifi_CcmpDecrypt
};




